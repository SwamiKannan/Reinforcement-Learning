{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "3996977e7d68ec12f2c9ffcfe5ce214b",
     "grade": false,
     "grade_id": "cell-649fd0b1aa7ccb0f",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "# Assignment 2: Optimal Policies with Dynamic Programming\n",
    "\n",
    "Welcome to Assignment 2. This notebook will help you understand:\n",
    "- Policy Evaluation and Policy Improvement.\n",
    "- Value and Policy Iteration.\n",
    "- Bellman Equations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "20729884a9ceb3804a03589ce5938a2d",
     "grade": false,
     "grade_id": "cell-9aafac39a58eeca4",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Gridworld City\n",
    "\n",
    "Gridworld City, a thriving metropolis with a booming technology industry, has recently experienced an influx of grid-loving software engineers. Unfortunately, the city's street parking system, which charges a fixed rate, is struggling to keep up with the increased demand. To address this, the city council has decided to modify the pricing scheme to better promote social welfare. In general, the city considers social welfare higher when more parking is being used, the exception being that the city prefers that at least one spot is left unoccupied (so that it is available in case someone really needs it). The city council has created a Markov decision process (MDP) to model the demand for parking with a reward function that reflects its preferences. Now the city has hired you &mdash; an expert in dynamic programming &mdash; to help determine an optimal policy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "77a7b97ee700b6ce77ed26bd22749e80",
     "grade": false,
     "grade_id": "cell-28ccff8d1e663850",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Preliminaries\n",
    "You'll need two imports to complete this assigment:\n",
    "- numpy: The fundamental package for scientific computing with Python.\n",
    "- tools: A module containing an environment and a plotting function.\n",
    "\n",
    "There are also some other lines in the cell below that are used for grading and plotting &mdash; you needn't worry about them.\n",
    "\n",
    "In this notebook, all cells are locked except those that you are explicitly asked to modify. It is up to you to decide how to implement your solution in these cells, **but please do not import other libraries** &mdash; doing so will break the autograder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "2b5347a2a22c1bacff0c0453119c8d84",
     "grade": false,
     "grade_id": "cell-c11ff54faaf3fd89",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import tools\n",
    "import grader"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "596fffc2a1391897952fcabe2a8db930",
     "grade": false,
     "grade_id": "cell-4c7c5c4373be59ff",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "In the city council's parking MDP, states are nonnegative integers indicating how many parking spaces are occupied, actions are nonnegative integers designating the price of street parking, the reward is a real value describing the city's preference for the situation, and time is discretized by hour. As might be expected, charging a high price is likely to decrease occupancy over the hour, while charging a low price is likely to increase it.\n",
    "\n",
    "For now, let's consider an environment with three parking spaces and three price points. Note that an environment with three parking spaces actually has four states &mdash; zero, one, two, or three spaces could be occupied."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4f51ef4bc98021f90e701f76ed48f676",
     "grade": false,
     "grade_id": "cell-d25d06a8bafc4c26",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# ---------------\n",
    "# Discussion Cell\n",
    "# ---------------\n",
    "num_spaces = 3\n",
    "num_prices = 3\n",
    "env = tools.ParkingWorld(num_spaces, num_prices)\n",
    "V = np.zeros(num_spaces + 1)\n",
    "pi = np.ones((num_spaces + 1, num_prices)) / num_prices"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "0813b0f481e1f2f90e12f38456781410",
     "grade": false,
     "grade_id": "cell-57212e031233c500",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "The value function is a one-dimensional array where the $i$-th entry gives the value of $i$ spaces being occupied."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "6e59c4a32939d9211dfc0f8fdd939780",
     "grade": false,
     "grade_id": "cell-c5f693a5ff49a888",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0.])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "V"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "eadfa7b22b07f8c457cf09a78eb23c8c",
     "grade": false,
     "grade_id": "cell-57154206afc97770",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "We can represent the policy as a two-dimensional array where the $(i, j)$-th entry gives the probability of taking action $j$ in state $i$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d732d93b6545408fa819526c2e52a0cf",
     "grade": false,
     "grade_id": "cell-85c017bb1e6fe4df",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.33333333, 0.33333333, 0.33333333],\n",
       "       [0.33333333, 0.33333333, 0.33333333],\n",
       "       [0.33333333, 0.33333333, 0.33333333],\n",
       "       [0.33333333, 0.33333333, 0.33333333]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "96d9ee84404cf38466f1c8c93b4aca9a",
     "grade": false,
     "grade_id": "cell-d7d514ba81bc686c",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pi(A=0|S=0) = 0.75    pi(A=1|S=0) = 0.11    pi(A=2|S=0) = 0.14    \n",
      "pi(A=0|S=1) = 0.33    pi(A=1|S=1) = 0.33    pi(A=2|S=1) = 0.33    \n",
      "pi(A=0|S=2) = 0.33    pi(A=1|S=2) = 0.33    pi(A=2|S=2) = 0.33    \n",
      "pi(A=0|S=3) = 0.33    pi(A=1|S=3) = 0.33    pi(A=2|S=3) = 0.33    \n"
     ]
    }
   ],
   "source": [
    "pi[0] = [0.75, 0.11, 0.14]\n",
    "\n",
    "for s, pi_s in enumerate(pi):\n",
    "    for a, p in enumerate(pi_s):\n",
    "        print(f'pi(A={a}|S={s}) = {p.round(2)}    ', end='')\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "faf7aa91a9f54e17835b6e5c3e28b4bf",
     "grade": false,
     "grade_id": "cell-46b46b0dc80c68c7",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "V[0] = 1\n",
    "\n",
    "tools.plot(V, pi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "4f450ea0212f959d952e9b0272e57cf3",
     "grade": false,
     "grade_id": "cell-ce3ac9318671059d",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "We can visualize a value function and policy with the `plot` function in the `tools` module. On the left, the value function is displayed as a barplot. State zero has an expected return of ten, while the other states have an expected return of zero. On the right, the policy is displayed on a two-dimensional grid. Each vertical strip gives the policy at the labeled state. In state zero, action zero is the darkest because the agent's policy makes this choice with the highest probability. In the other states the agent has the equiprobable policy, so the vertical strips are colored uniformly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "049e3d7344e203034323e1f86a503ee4",
     "grade": false,
     "grade_id": "cell-3975c91dbe24e9e8",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "You can access the state space and the action set as attributes of the environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4fafc756424773278069199ff876300e",
     "grade": false,
     "grade_id": "cell-94d868709c1a9eba",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "env.S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "dc72712f4890361c35c0b19f0df5befd",
     "grade": false,
     "grade_id": "cell-6f16d9e8ebf01b60",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "env.A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "12e6b88d7cf8ec6d20c7e14e3d43b5e2",
     "grade": false,
     "grade_id": "cell-927e52efe516a816",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "You will need to use the environment's `transitions` method to complete this assignment. The method takes a state and an action and returns a 2-dimensional array, where the entry at $(i, 0)$ is the reward for transitioning to state $i$ from the current state and the entry at $(i, 1)$ is the conditional probability of transitioning to state $i$ given the current state and action."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.18576164],\n",
       "       [2.        , 0.22688978],\n",
       "       [3.        , 0.19334272],\n",
       "       [2.        , 0.39400586]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state = 1\n",
    "action = 1\n",
    "transitions = env.transitions(state, action)\n",
    "transitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4d32e329bafe53f2061e6b577751f291",
     "grade": false,
     "grade_id": "cell-4185982b1a21cd04",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.12390437],\n",
       "       [2.        , 0.15133714],\n",
       "       [3.        , 0.1848436 ],\n",
       "       [2.        , 0.53991488]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state = 3\n",
    "action = 1\n",
    "transitions = env.transitions(state, action)\n",
    "transitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "25cbea37d8b8c6404081852743cbc6bd",
     "grade": false,
     "grade_id": "cell-379fdb797cae3afb",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p(S'=0, R=1.0 | S=3, A=1) = 0.12\n",
      "p(S'=1, R=2.0 | S=3, A=1) = 0.15\n",
      "p(S'=2, R=3.0 | S=3, A=1) = 0.18\n",
      "p(S'=3, R=2.0 | S=3, A=1) = 0.54\n"
     ]
    }
   ],
   "source": [
    "for sp, (r, p) in enumerate(transitions):\n",
    "    print(f'p(S\\'={sp}, R={r} | S={state}, A={action}) = {p.round(2)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "0869f6736a9ab680b0c82dccf72ba11c",
     "grade": false,
     "grade_id": "cell-141d4e3806427283",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Section 1: Policy Evaluation\n",
    "\n",
    "You're now ready to begin the assignment! First, the city council would like you to evaluate the quality of the existing pricing scheme. Policy evaluation works by iteratively applying the Bellman equation for $v_{\\pi}$ to a working value function, as an update rule, as shown below.\n",
    "\n",
    "$$\\large v(s) \\leftarrow \\sum_a \\pi(a | s) \\sum_{s', r} p(s', r | s, a)[r + \\gamma v(s')]$$\n",
    "This update can either occur \"in-place\" (i.e. the update rule is sequentially applied to each state) or with \"two-arrays\" (i.e. the update rule is simultaneously applied to each state). Both versions converge to $v_{\\pi}$ but the in-place version usually converges faster. **In this assignment, we will be implementing all update rules in-place**, as is done in the pseudocode of chapter 4 of the textbook. \n",
    "\n",
    "We have written an outline of the policy evaluation algorithm described in chapter 4.1 of the textbook. It is left to you to fill in the `bellman_update` function to complete the algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d940b556433954baa2dfa76c55918ca1",
     "grade": false,
     "grade_id": "cell-8d04cf6f6f397e17",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# lock\n",
    "def evaluate_policy(env, V, pi, gamma, theta):\n",
    "    delta = float('inf')\n",
    "    while delta > theta:\n",
    "        delta = 0\n",
    "        for s in env.S:\n",
    "            v = V[s]\n",
    "            bellman_update(env, V, pi, s, gamma)\n",
    "            delta = max(delta, abs(v - V[s]))\n",
    "            \n",
    "    return V"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "3d9220b9c5e2dad29041be432e1898de",
     "grade": false,
     "grade_id": "cell-4113388a5f8401b6",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Graded Cell\n",
    "# -----------\n",
    "def bellman_update(env, V, pi, s, gamma):\n",
    "    \"\"\"Mutate ``V`` according to the Bellman update equation.\"\"\"\n",
    "    # YOUR CODE HERE\n",
    "    v=0\n",
    "    E=np.zeros_like(V).T\n",
    "#     print('pi',pi)\n",
    "#     print('pi shape',pi.shape)\n",
    "#     print('s=', s)\n",
    "    action=np.array(env.A)\n",
    "#     print('V',V.shape)\n",
    "#     print('action',action)\n",
    "#     print('action.shape',action.shape)\n",
    "#     print('V.shape',V.shape[0])\n",
    "#     count=np.zeros((action.shape[0],V.shape[0])).T\n",
    "#     print('count shape', count.shape)\n",
    "    for a in action:\n",
    "        \n",
    "        transit=env.transitions(s,int(a))\n",
    "#         print('transit shape',transit.shape)\n",
    "        for s_,(rew,prob) in enumerate(transit):\n",
    "#             print('s:',s,'rew',rew,\"prob\")\n",
    "            E=np.multiply(prob,(rew+gamma*V[s_]))\n",
    "#             print('E',E)\n",
    "            v+=pi[s,a]*E\n",
    "#             print('pst addition with v',v)\n",
    "#             print('count[:,',a,']:',count[:,a])\n",
    "#             print('count',count)\n",
    "    #         print('V[a]',V[a])\n",
    "    #         print('V',V)\n",
    "#         print(\"Loop end\")\n",
    "    V[s]=v\n",
    "#     print('V from func',V)\n",
    "        \n",
    "    \n",
    "#     raise NotImplementedError()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "4d9639225bc3d57f1079ceab1d57d411",
     "grade": false,
     "grade_id": "cell-5c1f3ff4b0e1b0bf",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "The cell below uses the policy evaluation algorithm to evaluate the city's policy, which charges a constant price of one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[80.04173399 81.65532303 83.37394007 85.12975566 86.87174913 88.55589131\n",
      " 90.14020422 91.58180605 92.81929841 93.78915889 87.77792991]\n"
     ]
    }
   ],
   "source": [
    "# --------------\n",
    "# Debugging Cell\n",
    "# --------------\n",
    "# Feel free to make any changes to this cell to debug your code\n",
    "\n",
    "# set up test environment\n",
    "num_spaces = 10\n",
    "num_prices = 4\n",
    "env = tools.ParkingWorld(num_spaces, num_prices)\n",
    "\n",
    "# build test policy\n",
    "city_policy = np.zeros((num_spaces + 1, num_prices))\n",
    "city_policy[:, 1] = 1\n",
    "\n",
    "gamma = 0.9\n",
    "theta = 0.1\n",
    "\n",
    "V = np.zeros(num_spaces + 1)\n",
    "V = evaluate_policy(env, V, city_policy, gamma, theta)\n",
    "\n",
    "print(V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "fe42a26382eb7ed41954597ed701513c",
     "grade": true,
     "grade_id": "cell-104d8ba132c36b33",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Tested Cell\n",
    "# -----------\n",
    "# The contents of the cell will be tested by the autograder.\n",
    "# If they do not pass here, they will not pass there.\n",
    "\n",
    "# set up test environment\n",
    "num_spaces = 10\n",
    "num_prices = 4\n",
    "env = tools.ParkingWorld(num_spaces, num_prices)\n",
    "\n",
    "# build test policy\n",
    "city_policy = np.zeros((num_spaces + 1, num_prices))\n",
    "city_policy[:, 1] = 1\n",
    "\n",
    "gamma = 0.9\n",
    "theta = 0.1\n",
    "\n",
    "V = np.zeros(num_spaces + 1)\n",
    "V = evaluate_policy(env, V, city_policy, gamma, theta)\n",
    "\n",
    "# test the value function\n",
    "answer = [80.04, 81.65, 83.37, 85.12, 86.87, 88.55, 90.14, 91.58, 92.81, 93.78, 87.77]\n",
    "\n",
    "# make sure the value function is within 2 decimal places of the correct answer\n",
    "assert grader.near(V, answer, 1e-2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "0f19b2dc70097c6425bbc3bd25a2a500",
     "grade": false,
     "grade_id": "cell-b612ffe570dd7e29",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "You can use the ``plot`` function to visualize the final value function and policy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ff7b2798b5af88f6444a49099599a06a",
     "grade": false,
     "grade_id": "cell-fe5cf61a03a028fc",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# lock\n",
    "tools.plot(V, city_policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "387eb9f1789b50daaa10e3503117525c",
     "grade": false,
     "grade_id": "cell-7dbb5974798259f7",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "Observe that the value function qualitatively resembles the city council's preferences &mdash; it monotonically increases as more parking is used, until there is no parking left, in which case the value is lower. Because of the relatively simple reward function (more reward is accrued when many but not all parking spots are taken and less reward is accrued when few or all parking spots are taken) and the highly stochastic dynamics function (each state has positive probability of being reached each time step) the value functions of most policies will qualitatively resemble this graph. However, depending on the intelligence of the policy, the scale of the graph will differ. In other words, better policies will increase the expected return at every state rather than changing the relative desirability of the states. Intuitively, the value of a less desirable state can be increased by making it less likely to remain in a less desirable state. Similarly, the value of a more desirable state can be increased by making it more likely to remain in a more desirable state. That is to say, good policies are policies that spend more time in desirable states and less time in undesirable states. As we will see in this assignment, such a steady state distribution is achieved by setting the price to be low in low occupancy states (so that the occupancy will increase) and setting the price high when occupancy is high (so that full occupancy will be avoided)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "f0d6665789065c7bfa797664e0f43c8c",
     "grade": false,
     "grade_id": "cell-45d6a1c8f905e939",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Section 2: Policy Iteration\n",
    "Now the city council would like you to compute a more efficient policy using policy iteration. Policy iteration works by alternating between evaluating the existing policy and making the policy greedy with respect to the existing value function. We have written an outline of the policy iteration algorithm described in chapter 4.3 of the textbook. We will make use of the policy evaluation algorithm you completed in section 1. It is left to you to fill in the `q_greedify_policy` function, such that it modifies the policy at $s$ to be greedy with respect to the q-values at $s$, to complete the policy improvement algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "cd767646e891985960e2d9c9b3b76ae1",
     "grade": false,
     "grade_id": "cell-15ec36bbf7a6fdc6",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "def improve_policy(env, V, pi, gamma):\n",
    "    policy_stable = True\n",
    "    for s in env.S:\n",
    "        old = pi[s].copy()\n",
    "        q_greedify_policy(env, V, pi, s, gamma)\n",
    "        \n",
    "        if not np.array_equal(pi[s], old):\n",
    "            policy_stable = False\n",
    "            \n",
    "    return pi, policy_stable\n",
    "\n",
    "def policy_iteration(env, gamma, theta):\n",
    "    V = np.zeros(len(env.S))\n",
    "    pi = np.ones((len(env.S), len(env.A))) / len(env.A)\n",
    "    policy_stable = False\n",
    "    \n",
    "    while not policy_stable:\n",
    "        V = evaluate_policy(env, V, pi, gamma, theta)\n",
    "        pi, policy_stable = improve_policy(env, V, pi, gamma)\n",
    "        \n",
    "    return V, pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "03f887ab5a215f3e89ba751895d7e9f8",
     "grade": false,
     "grade_id": "cell-43cadb209544e857",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Graded Cell\n",
    "# -----------\n",
    "def q_greedify_policy(env, V, pi, s, gamma):\n",
    "    \"\"\"Mutate ``pi`` to be greedy with respect to the q-values induced by ``V``.\"\"\"\n",
    "    # YOUR CODE HERE\n",
    "    action=env.A\n",
    "    G=np.zeros_like(action,dtype=float)\n",
    "    for a in action:\n",
    "        transit=env.transitions(s,a)\n",
    "        for s_,(rew,prob) in enumerate(transit):\n",
    "            G[a]+=prob*(rew+gamma*V[s_])\n",
    "    all_greedy=np.argwhere(G == np.amax(G))\n",
    "    for a in action:\n",
    "        if a in all_greedy:\n",
    "            pi[s,a]=1/len(all_greedy)\n",
    "        else:\n",
    "            pi[s,a]=0\n",
    "#     raise NotImplementedError()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------\n",
    "# Debugging Cell\n",
    "# --------------\n",
    "# Feel free to make any changes to this cell to debug your code\n",
    "\n",
    "gamma = 0.9\n",
    "theta = 0.1\n",
    "env = tools.ParkingWorld(num_spaces=6, num_prices=4)\n",
    "\n",
    "V = np.array([7, 6, 5, 4, 3, 2, 1])\n",
    "pi = np.ones((7, 4)) / 4\n",
    "\n",
    "new_pi, stable = improve_policy(env, V, pi, gamma)\n",
    "\n",
    "# expect first call to greedify policy\n",
    "expected_pi = np.array([\n",
    "    [0, 0, 0, 1],\n",
    "    [0, 0, 0, 1],\n",
    "    [0, 0, 0, 1],\n",
    "    [0, 0, 0, 1],\n",
    "    [0, 0, 0, 1],\n",
    "    [0, 0, 0, 1],\n",
    "    [0, 0, 0, 1],\n",
    "])\n",
    "assert np.all(new_pi == expected_pi)\n",
    "assert stable == False\n",
    "\n",
    "# the value function has not changed, so the greedy policy should not change\n",
    "new_pi, stable = improve_policy(env, V, new_pi, gamma)\n",
    "\n",
    "assert np.all(new_pi == expected_pi)\n",
    "assert stable == True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9b8b71edde57f8aab6356de9a38527e3",
     "grade": true,
     "grade_id": "cell-468eb92e69c7f65e",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Tested Cell\n",
    "# -----------\n",
    "# The contents of the cell will be tested by the autograder.\n",
    "# If they do not pass here, they will not pass there.\n",
    "gamma = 0.9\n",
    "theta = 0.1\n",
    "env = tools.ParkingWorld(num_spaces=10, num_prices=4)\n",
    "\n",
    "V, pi = policy_iteration(env, gamma, theta)\n",
    "\n",
    "V_answer = [81.60, 83.28, 85.03, 86.79, 88.51, 90.16, 91.70, 93.08, 94.25, 95.25, 89.45]\n",
    "pi_answer = [\n",
    "    [1, 0, 0, 0],\n",
    "    [1, 0, 0, 0],\n",
    "    [1, 0, 0, 0],\n",
    "    [1, 0, 0, 0],\n",
    "    [1, 0, 0, 0],\n",
    "    [1, 0, 0, 0],\n",
    "    [1, 0, 0, 0],\n",
    "    [1, 0, 0, 0],\n",
    "    [1, 0, 0, 0],\n",
    "    [0, 0, 0, 1],\n",
    "    [0, 0, 0, 1],\n",
    "]\n",
    "\n",
    "# make sure value function is within 2 decimal places of answer\n",
    "assert grader.near(V, V_answer, 1e-2)\n",
    "# make sure policy is exactly correct\n",
    "assert np.all(pi == pi_answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "b70073346d140503e1572043f2be5c7e",
     "grade": false,
     "grade_id": "cell-d82e51ee8122647c",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "When you are ready to test the policy iteration algorithm, run the cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "aeedaa745e6dc30ebbc6b822c670c9b3",
     "grade": false,
     "grade_id": "cell-6939985ef9ad58a3",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "env = tools.ParkingWorld(num_spaces=10, num_prices=4)\n",
    "gamma = 0.9\n",
    "theta = 0.1\n",
    "V, pi = policy_iteration(env, gamma, theta)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "dcd619f8fcc010b6933b2bba4ce9f9e7",
     "grade": false,
     "grade_id": "cell-acd7f476ed298570",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "You can use the ``plot`` function to visualize the final value function and policy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "da17cf77a51f4fabd0ce3a93e2803af8",
     "grade": false,
     "grade_id": "cell-73a1da64ca84a151",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tools.plot(V, pi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "0943d42dc7e60e40739b606700125da1",
     "grade": false,
     "grade_id": "cell-92139bf490757a44",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "You can check the value function (rounded to one decimal place) and policy against the answer below:<br>\n",
    "State $\\quad\\quad$    Value $\\quad\\quad$ Action<br>\n",
    "0 $\\quad\\quad\\quad\\;$        81.6 $\\quad\\quad\\;$ 0<br>\n",
    "1 $\\quad\\quad\\quad\\;$        83.3 $\\quad\\quad\\;$ 0<br>\n",
    "2 $\\quad\\quad\\quad\\;$        85.0 $\\quad\\quad\\;$ 0<br>\n",
    "3 $\\quad\\quad\\quad\\;$        86.8 $\\quad\\quad\\;$ 0<br>\n",
    "4 $\\quad\\quad\\quad\\;$        88.5 $\\quad\\quad\\;$ 0<br>\n",
    "5 $\\quad\\quad\\quad\\;$        90.2 $\\quad\\quad\\;$ 0<br>\n",
    "6 $\\quad\\quad\\quad\\;$        91.7 $\\quad\\quad\\;$ 0<br>\n",
    "7 $\\quad\\quad\\quad\\;$        93.1 $\\quad\\quad\\;$ 0<br>\n",
    "8 $\\quad\\quad\\quad\\;$        94.3 $\\quad\\quad\\;$ 0<br>\n",
    "9 $\\quad\\quad\\quad\\;$        95.3 $\\quad\\quad\\;$ 3<br>\n",
    "10 $\\quad\\quad\\;\\;\\,\\,$      89.5 $\\quad\\quad\\;$ 3<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "e59b175ca7605a8002c2040043f7b1af",
     "grade": false,
     "grade_id": "cell-e7628124eafb2fc2",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Section 3: Value Iteration\n",
    "The city has also heard about value iteration and would like you to implement it. Value iteration works by iteratively applying the Bellman optimality equation for $v_{\\ast}$ to a working value function, as an update rule, as shown below.\n",
    "\n",
    "$$\\large v(s) \\leftarrow \\max_a \\sum_{s', r} p(s', r | s, a)[r + \\gamma v(s')]$$\n",
    "We have written an outline of the value iteration algorithm described in chapter 4.4 of the textbook. It is left to you to fill in the `bellman_optimality_update` function to complete the value iteration algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "3743399285b929801497af405783d06e",
     "grade": false,
     "grade_id": "cell-75baf962376afa7c",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "def value_iteration(env, gamma, theta):\n",
    "    V = np.zeros(len(env.S))\n",
    "    while True:\n",
    "        delta = 0\n",
    "        for s in env.S:\n",
    "            v = V[s]\n",
    "            bellman_optimality_update(env, V, s, gamma)\n",
    "            delta = max(delta, abs(v - V[s]))\n",
    "        if delta < theta:\n",
    "            break\n",
    "    pi = np.ones((len(env.S), len(env.A))) / len(env.A)\n",
    "    for s in env.S:\n",
    "        q_greedify_policy(env, V, pi, s, gamma)\n",
    "    return V, pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "5b8c52e5f66f45467b7f7262fc98e89b",
     "grade": false,
     "grade_id": "cell-f2c6a183cc0923fb",
     "locked": false,
     "schema_version": 3,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# -----------\n",
    "# Graded Cell\n",
    "# -----------\n",
    "def bellman_optimality_update(env, V, s, gamma):\n",
    "    \"\"\"Mutate ``V`` according to the Bellman optimality update equation.\"\"\"\n",
    "    # YOUR CODE HERE\n",
    "    r=[]\n",
    "    \n",
    "    vmax=-5000000\n",
    "    actions = env.A\n",
    "    print('actions',actions)\n",
    "    for a in actions:\n",
    "        q=0\n",
    "        transit=env.transitions(s,a)\n",
    "        for s_,(rew,prob)in enumerate(transit):\n",
    "            q+=prob*(rew+gamma*V[s_])\n",
    "        vmax=max(vmax,q)\n",
    "        r.append(q)\n",
    "    print('vmax',vmax)\n",
    "    print('q',q)\n",
    "    print('a',a)\n",
    "    \n",
    "        \n",
    "    print(r)\n",
    "    print('max of r',np.max(r))\n",
    "    V[s]=np.max(r)\n",
    "#     raise NotImplementedError()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "actions [0, 1, 2, 3]\n",
      "vmax 5.653852604318307\n",
      "q 5.653852604318307\n",
      "a 3\n",
      "[5.632981308044116, 5.639669050758412, 5.646625084474893, 5.653852604318307]\n",
      "max of r 5.653852604318307\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 7.338233169882892\n",
      "q 7.338233169882892\n",
      "a 3\n",
      "[7.300305000148783, 7.313986140125924, 7.327875688481355, 7.338233169882892]\n",
      "max of r 7.338233169882892\n"
     ]
    }
   ],
   "source": [
    "# --------------\n",
    "# Debugging Cell\n",
    "# --------------\n",
    "# Feel free to make any changes to this cell to debug your code\n",
    "\n",
    "gamma = 0.9\n",
    "env = tools.ParkingWorld(num_spaces=6, num_prices=4)\n",
    "\n",
    "V = np.array([7, 6, 5, 4, 3, 2, 1])\n",
    "\n",
    "# only state 0 updated\n",
    "bellman_optimality_update(env, V, 0, gamma)\n",
    "assert list(V) == [5, 6, 5, 4, 3, 2, 1]\n",
    "\n",
    "# only state 2 updated\n",
    "bellman_optimality_update(env, V, 2, gamma)\n",
    "assert list(V) == [5, 6, 7, 4, 3, 2, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "bdcf2724450c1e103db4ded3ade9a97b",
     "grade": true,
     "grade_id": "cell-92e457ed985823c3",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "actions [0, 1, 2, 3]\n",
      "vmax 7.724989139692882\n",
      "q 7.4241540709502045\n",
      "a 3\n",
      "[7.724989139692882, 7.631678647174807, 7.531478506406211, 7.4241540709502045]\n",
      "max of r 7.724989139692882\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 9.831075290579061\n",
      "q 9.507146132100278\n",
      "a 3\n",
      "[9.831075290579061, 9.728482433192095, 9.620459504640166, 9.507146132100278]\n",
      "max of r 9.831075290579061\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 11.959214383188346\n",
      "q 11.645070967949199\n",
      "a 3\n",
      "[11.959214383188346, 11.858216717040596, 11.753391979623398, 11.645070967949199]\n",
      "max of r 11.959214383188346\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 14.095536836539415\n",
      "q 13.829286905912825\n",
      "a 3\n",
      "[14.095536836539415, 14.00521599637308, 13.912505868335927, 13.829286905912825]\n",
      "max of r 14.095536836539415\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 16.30788424287847\n",
      "q 16.134754612169957\n",
      "a 3\n",
      "[16.30788424287847, 16.24184387541738, 16.174658226703343, 16.134754612169957]\n",
      "max of r 16.30788424287847\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 18.481144566853892\n",
      "q 18.413589898394235\n",
      "a 3\n",
      "[18.481144566853892, 18.44648299429047, 18.411482059359777, 18.413589898394235]\n",
      "max of r 18.481144566853892\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 20.655969416441742\n",
      "q 20.655969416441742\n",
      "a 3\n",
      "[20.6012250831472, 20.606296750392257, 20.622526958495214, 20.655969416441742]\n",
      "max of r 20.655969416441742\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 22.84735373401127\n",
      "q 22.84735373401127\n",
      "a 3\n",
      "[22.649310859207574, 22.704002765603217, 22.7733217055776, 22.84735373401127]\n",
      "max of r 22.84735373401127\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 24.96851474788018\n",
      "q 24.96851474788018\n",
      "a 3\n",
      "[24.601403047665436, 24.718994782652103, 24.843101429679255, 24.96851474788018]\n",
      "max of r 24.96851474788018\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 26.995010146496103\n",
      "q 26.995010146496103\n",
      "a 3\n",
      "[26.427330070920817, 26.616721028909218, 26.805378221612898, 26.995010146496103]\n",
      "max of r 26.995010146496103\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 22.22946837842436\n",
      "q 22.22946837842436\n",
      "a 3\n",
      "[21.422479756773757, 21.690581546383115, 21.960024962403743, 22.22946837842436]\n",
      "max of r 22.22946837842436\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 16.591169272413634\n",
      "q 16.137550291908056\n",
      "a 3\n",
      "[16.591169272413634, 16.450469550591215, 16.299381162219706, 16.137550291908056]\n",
      "max of r 16.591169272413634\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 19.258181565451714\n",
      "q 18.765812847461632\n",
      "a 3\n",
      "[19.258181565451714, 19.10224156331119, 18.93804791339581, 18.765812847461632]\n",
      "max of r 19.258181565451714\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 21.920979951610242\n",
      "q 21.427762750930157\n",
      "a 3\n",
      "[21.920979951610242, 21.76240974527728, 21.597830890388416, 21.427762750930157]\n",
      "max of r 21.920979951610242\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 24.45482564302403\n",
      "q 24.027339762553545\n",
      "a 3\n",
      "[24.45482564302403, 24.311013133343685, 24.16339630248544, 24.027339762553545]\n",
      "max of r 24.45482564302403\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 26.864511749655943\n",
      "q 26.52537392669398\n",
      "a 3\n",
      "[26.864511749655943, 26.742748610008462, 26.61887383702974, 26.52537392669398]\n",
      "max of r 26.864511749655943\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 29.14392957452163\n",
      "q 28.90610641398597\n",
      "a 3\n",
      "[29.14392957452163, 29.054227559198115, 28.963647294966144, 28.90610641398597]\n",
      "max of r 29.14392957452163\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 31.3562793175804\n",
      "q 31.2552219886257\n",
      "a 3\n",
      "[31.3562793175804, 31.31564409087261, 31.281020157897824, 31.2552219886257]\n",
      "max of r 31.3562793175804\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 33.43748812512112\n",
      "q 33.43748812512112\n",
      "a 3\n",
      "[33.377336070623656, 33.40002137508157, 33.41907640044719, 33.43748812512112]\n",
      "max of r 33.43748812512112\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 35.4260075235802\n",
      "q 35.4260075235802\n",
      "a 3\n",
      "[35.171299876362724, 35.27006017388631, 35.34762552087403, 35.4260075235802]\n",
      "max of r 35.4260075235802\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 37.18185840982796\n",
      "q 37.18185840982796\n",
      "a 3\n",
      "[36.68915375892173, 36.866502689172734, 37.02377426320418, 37.18185840982796]\n",
      "max of r 37.18185840982796\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 31.9860254941809\n",
      "q 31.9860254941809\n",
      "a 3\n",
      "[31.1994784810014, 31.46078905736863, 31.723407275774772, 31.9860254941809]\n",
      "max of r 31.9860254941809\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 25.585327674300306\n",
      "q 25.092295560851557\n",
      "a 3\n",
      "[25.585327674300306, 25.432403118245706, 25.26818726609298, 25.092295560851557]\n",
      "max of r 25.585327674300306\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 28.29111646647673\n",
      "q 27.766897571872818\n",
      "a 3\n",
      "[28.29111646647673, 28.125089071640726, 27.950274119929354, 27.766897571872818]\n",
      "max of r 28.29111646647673\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 30.90195174665029\n",
      "q 30.360476181837896\n",
      "a 3\n",
      "[30.90195174665029, 30.727866390506648, 30.54718447534991, 30.360476181837896]\n",
      "max of r 30.90195174665029\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 33.40337555644078\n",
      "q 32.91589254141173\n",
      "a 3\n",
      "[33.40337555644078, 33.240150968389266, 33.072608544855576, 32.91589254141173]\n",
      "max of r 33.40337555644078\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 35.79566602856258\n",
      "q 35.38666204094174\n",
      "a 3\n",
      "[35.79566602856258, 35.651327607167985, 35.504486048761, 35.38666204094174]\n",
      "max of r 35.79566602856258\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 38.048261654616994\n",
      "q 37.753598533559895\n",
      "a 3\n",
      "[38.048261654616994, 37.944070529323696, 37.83885929604588, 37.753598533559895]\n",
      "max of r 38.048261654616994\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 40.12985994342174\n",
      "q 39.975773912984906\n",
      "a 3\n",
      "[40.12985994342174, 40.07815880839894, 40.026895792171985, 39.975773912984906]\n",
      "max of r 40.12985994342174\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 42.028594711749875\n",
      "q 42.025490558028494\n",
      "a 3\n",
      "[42.0111354306939, 42.02772690223284, 42.028594711749875, 42.025490558028494]\n",
      "max of r 42.028594711749875\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 43.87031913558941\n",
      "q 43.87031913558941\n",
      "a 3\n",
      "[43.65056124108046, 43.74661871413222, 43.80814503139051, 43.87031913558941]\n",
      "max of r 43.87031913558941\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 45.368061194881946\n",
      "q 45.368061194881946\n",
      "a 3\n",
      "[44.909489074269786, 45.080727164713196, 45.22402399504672, 45.368061194881946]\n",
      "max of r 45.368061194881946\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 39.90587751323015\n",
      "q 39.90587751323015\n",
      "a 3\n",
      "[39.14500284004072, 39.39778442342076, 39.65183096832547, 39.90587751323015]\n",
      "max of r 39.90587751323015\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 33.50611238488562\n",
      "q 33.020979806924366\n",
      "a 3\n",
      "[33.50611238488562, 33.35563804033754, 33.19405331284446, 33.020979806924366]\n",
      "max of r 33.50611238488562\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 36.10370356426784\n",
      "q 35.57092483701047\n",
      "a 3\n",
      "[36.10370356426784, 35.93496515170563, 35.75729569255972, 35.57092483701047]\n",
      "max of r 36.10370356426784\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 38.62405111721993\n",
      "q 38.06766141325394\n",
      "a 3\n",
      "[38.62405111721993, 38.445170838839985, 38.259512309039295, 38.06766141325394]\n",
      "max of r 38.62405111721993\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 41.04369713211813\n",
      "q 40.53934795162727\n",
      "a 3\n",
      "[41.04369713211813, 40.87540904218054, 40.70266917022509, 40.53934795162727]\n",
      "max of r 41.04369713211813\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 43.35701287645068\n",
      "q 42.93131773892713\n",
      "a 3\n",
      "[43.35701287645068, 43.20860667156983, 43.05762678560867, 42.93131773892713]\n",
      "max of r 43.35701287645068\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 45.529003706411956\n",
      "q 45.22036706509459\n",
      "a 3\n",
      "[45.529003706411956, 45.422782162005696, 45.31552063031385, 45.22036706509459]\n",
      "max of r 45.529003706411956\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 47.44327275511392\n",
      "q 47.265343978567486\n",
      "a 3\n",
      "[47.44327275511392, 47.388159325384514, 47.329648135611166, 47.265343978567486]\n",
      "max of r 47.44327275511392\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 49.176503931658935\n",
      "q 49.14876090060356\n",
      "a 3\n",
      "[49.16241114179761, 49.176503931658935, 49.165845867269006, 49.14876090060356]\n",
      "max of r 49.176503931658935\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 50.82995320357061\n",
      "q 50.82995320357061\n",
      "a 3\n",
      "[50.645761273566066, 50.73139265723005, 50.780414862424394, 50.82995320357061]\n",
      "max of r 50.82995320357061\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 52.27166777415946\n",
      "q 52.27166777415946\n",
      "a 3\n",
      "[51.856120113595836, 52.01391782683469, 52.1424607301886, 52.27166777415946]\n",
      "max of r 52.27166777415946\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 46.76046602848233\n",
      "q 46.76046602848233\n",
      "a 3\n",
      "[46.048814893775656, 46.285243187401576, 46.522854607941966, 46.76046602848233]\n",
      "max of r 46.76046602848233\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 40.36486127910541\n",
      "q 39.89477052725768\n",
      "a 3\n",
      "[40.36486127910541, 40.21905248172539, 40.06247778547732, 39.89477052725768]\n",
      "max of r 40.36486127910541\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 42.838519661893045\n",
      "q 42.31010564118073\n",
      "a 3\n",
      "[42.838519661893045, 42.67116361243212, 42.49494968259232, 42.31010564118073]\n",
      "max of r 42.838519661893045\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 45.160326929708596\n",
      "q 44.58807387182842\n",
      "a 3\n",
      "[45.160326929708596, 44.97634655486032, 44.78539467231709, 44.58807387182842]\n",
      "max of r 45.160326929708596\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 47.48869309736731\n",
      "q 46.97715701012652\n",
      "a 3\n",
      "[47.48869309736731, 47.31874162058071, 47.1442943596388, 46.97715701012652]\n",
      "max of r 47.48869309736731\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 49.62002486852401\n",
      "q 49.18002473918456\n",
      "a 3\n",
      "[49.62002486852401, 49.46933894328316, 49.31603980173392, 49.18002473918456]\n",
      "max of r 49.62002486852401\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 51.6359435103315\n",
      "q 51.29076850863677\n",
      "a 3\n",
      "[51.6359435103315, 51.51857985363965, 51.40006712016273, 51.29076850863677]\n",
      "max of r 51.6359435103315\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 53.50436913857245\n",
      "q 53.28270615326779\n",
      "a 3\n",
      "[53.50436913857245, 53.43627856404084, 53.36347047182489, 53.28270615326779]\n",
      "max of r 53.50436913857245\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 55.18460338374376\n",
      "q 55.12150757319788\n",
      "a 3\n",
      "[55.18460338374376, 55.18444962079394, 55.15667936533733, 55.12150757319788]\n",
      "max of r 55.18460338374376\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 56.76411139808563\n",
      "q 56.76411139808563\n",
      "a 3\n",
      "[56.634051584720154, 56.70381424966124, 56.733804943630005, 56.76411139808563]\n",
      "max of r 56.76411139808563\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 58.171482651510374\n",
      "q 58.171482651510374\n",
      "a 3\n",
      "[57.81402585132909, 57.9536766064238, 58.06229902010051, 58.171482651510374]\n",
      "max of r 58.171482651510374\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 52.6287836553567\n",
      "q 52.6287836553567\n",
      "a 3\n",
      "[51.97865026063309, 52.19464082349094, 52.411712239423835, 52.6287836553567]\n",
      "max of r 52.6287836553567\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 46.0020991108454\n",
      "q 45.561221900348094\n",
      "a 3\n",
      "[46.0020991108454, 45.865351524124776, 45.71850707963188, 45.561221900348094]\n",
      "max of r 46.0020991108454\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 48.368657576989776\n",
      "q 47.83078209977833\n",
      "a 3\n",
      "[48.368657576989776, 48.1983049530252, 48.01893584492296, 47.83078209977833]\n",
      "max of r 48.368657576989776\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 50.6661908442843\n",
      "q 50.11769769335271\n",
      "a 3\n",
      "[50.6661908442843, 50.48984932173498, 50.306825748002694, 50.11769769335271]\n",
      "max of r 50.6661908442843\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 52.804676518067396\n",
      "q 52.27572876902611\n",
      "a 3\n",
      "[52.804676518067396, 52.62915256445674, 52.448985416068155, 52.27572876902611]\n",
      "max of r 52.804676518067396\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 54.870172703485565\n",
      "q 54.400640392973855\n",
      "a 3\n",
      "[54.870172703485565, 54.71025078391095, 54.5475554761275, 54.400640392973855]\n",
      "max of r 54.870172703485565\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 56.83297496475071\n",
      "q 56.44938635934969\n",
      "a 3\n",
      "[56.83297496475071, 56.703897353700484, 56.573555977609956, 56.44938635934969]\n",
      "max of r 56.83297496475071\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 58.657377129095565\n",
      "q 58.390499256463315\n",
      "a 3\n",
      "[58.657377129095565, 58.57587005163121, 58.488281016729225, 58.390499256463315]\n",
      "max of r 58.657377129095565\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 60.30015175478443\n",
      "q 60.186427866586996\n",
      "a 3\n",
      "[60.30015175478443, 60.28541072766828, 60.24011903703621, 60.186427866586996]\n",
      "max of r 60.30015175478443\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 61.79182984565435\n",
      "q 61.79182984565435\n",
      "a 3\n",
      "[61.71685501196218, 61.77046962834052, 61.78109380804561, 61.79182984565435]\n",
      "max of r 61.79182984565435\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 63.16597066978417\n",
      "q 63.16597066978417\n",
      "a 3\n",
      "[62.86737797668885, 62.988640219710376, 63.07707698232517, 63.16597066978417]\n",
      "max of r 63.16597066978417\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 57.59267363670337\n",
      "q 57.59267363670337\n",
      "a 3\n",
      "[57.00468895223928, 57.20003216023306, 57.39635289846824, 57.59267363670337]\n",
      "max of r 57.59267363670337\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 50.76559949772899\n",
      "q 50.352778215372716\n",
      "a 3\n",
      "[50.76559949772899, 50.63755406293443, 50.500054300100096, 50.352778215372716]\n",
      "max of r 50.76559949772899\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 52.88875965056124\n",
      "q 52.355944259496255\n",
      "a 3\n",
      "[52.88875965056124, 52.720009626062634, 52.542327940379636, 52.355944259496255]\n",
      "max of r 52.88875965056124\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 55.008554097688034\n",
      "q 54.42468123832781\n",
      "a 3\n",
      "[55.008554097688034, 54.82083793601868, 54.62600870771582, 54.42468123832781]\n",
      "max of r 55.008554097688034\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 57.17957156352206\n",
      "q 56.624696965562876\n",
      "a 3\n",
      "[57.17957156352206, 56.99574990884351, 56.80706555748159, 56.624696965562876]\n",
      "max of r 57.17957156352206\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 59.269723793318455\n",
      "q 58.78039546976384\n",
      "a 3\n",
      "[59.269723793318455, 59.10361080159685, 58.93461705523072, 58.78039546976384]\n",
      "max of r 59.269723793318455\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 61.25158203135532\n",
      "q 60.85258908889803\n",
      "a 3\n",
      "[61.25158203135532, 61.11780697763407, 60.98272216744318, 60.85258908889803]\n",
      "max of r 61.25158203135532\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 63.0909343751893\n",
      "q 62.8118933494333\n",
      "a 3\n",
      "[63.0909343751893, 63.00581815504647, 62.914252932657796, 62.8118933494333]\n",
      "max of r 63.0909343751893\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 64.74557514320233\n",
      "q 64.62213744552787\n",
      "a 3\n",
      "[64.74557514320233, 64.72803531527295, 64.6793818560146, 64.62213744552787]\n",
      "max of r 64.74557514320233\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 66.14236071120074\n",
      "q 66.14236071120074\n",
      "a 3\n",
      "[66.08950221440304, 66.13663347208143, 66.1394820956101, 66.14236071120074]\n",
      "max of r 66.14236071120074\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 67.54233211344756\n",
      "q 67.54233211344756\n",
      "a 3\n",
      "[67.26168678947602, 67.3773424679856, 67.45962472748218, 67.54233211344756]\n",
      "max of r 67.54233211344756\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 61.89085470651928\n",
      "q 61.89085470651928\n",
      "a 3\n",
      "[61.331630623005424, 61.517418840534496, 61.704136773526905, 61.89085470651928]\n",
      "max of r 61.89085470651928\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 54.81497369183144\n",
      "q 54.38234468321992\n",
      "a 3\n",
      "[54.81497369183144, 54.68078446302953, 54.536687274677696, 54.38234468321992]\n",
      "max of r 54.81497369183144\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 56.9817722555901\n",
      "q 56.41311321886245\n",
      "a 3\n",
      "[56.9817722555901, 56.80167005135885, 56.612035333745524, 56.41311321886245]\n",
      "max of r 56.9817722555901\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 59.120931552985006\n",
      "q 58.523047855220874\n",
      "a 3\n",
      "[59.120931552985006, 58.9287108818753, 58.72920645624079, 58.523047855220874]\n",
      "max of r 59.120931552985006\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 61.208834163806515\n",
      "q 60.6382618257049\n",
      "a 3\n",
      "[61.208834163806515, 61.020337712629555, 60.82685490078922, 60.6382618257049]\n",
      "max of r 61.208834163806515\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 63.218343477659324\n",
      "q 62.71376452443376\n",
      "a 3\n",
      "[63.218343477659324, 63.04866407374033, 62.87604206595964, 62.71376452443376]\n",
      "max of r 63.218343477659324\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 65.11754256265283\n",
      "q 64.70633473632736\n",
      "a 3\n",
      "[65.11754256265283, 64.98237183141603, 64.84587767899703, 64.70633473632736]\n",
      "max of r 65.11754256265283\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 66.86835650913201\n",
      "q 66.58249362198848\n",
      "a 3\n",
      "[66.86835650913201, 66.78504021389506, 66.69181512353764, 66.58249362198848]\n",
      "max of r 66.86835650913201\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 68.35597511354119\n",
      "q 68.20630877342198\n",
      "a 3\n",
      "[68.35597511354119, 68.32976765103245, 68.2724025102197, 68.20630877342198]\n",
      "max of r 68.35597511354119\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 69.76936087993467\n",
      "q 69.75795355773916\n",
      "a 3\n",
      "[69.72263420736564, 69.76936087993467, 69.76368708742694, 69.75795355773916]\n",
      "max of r 69.76936087993467\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 70.97936493415459\n",
      "q 70.97936493415459\n",
      "a 3\n",
      "[70.72237592103374, 70.83064162321958, 70.90481167206889, 70.97936493415459]\n",
      "max of r 70.97936493415459\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 65.25634611831686\n",
      "q 65.25634611831686\n",
      "a 3\n",
      "[64.73054113933668, 64.90522669507816, 65.08078640669751, 65.25634611831686]\n",
      "max of r 65.25634611831686\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 58.296696381835915\n",
      "q 57.869280855906204\n",
      "a 3\n",
      "[58.296696381835915, 58.164124227262796, 58.02176351099446, 57.869280855906204]\n",
      "max of r 58.296696381835915\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 60.452009119473324\n",
      "q 59.8927842915744\n",
      "a 3\n",
      "[60.452009119473324, 60.27489486003057, 60.08840623420793, 59.8927842915744]\n",
      "max of r 60.452009119473324\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 62.575563266407066\n",
      "q 61.99118629839399\n",
      "a 3\n",
      "[62.575563266407066, 62.38768503291015, 62.192687591445406, 61.99118629839399]\n",
      "max of r 62.575563266407066\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 64.5594567210262\n",
      "q 63.988943762777104\n",
      "a 3\n",
      "[64.5594567210262, 64.37119996424883, 64.1779631875255, 63.988943762777104]\n",
      "max of r 64.5594567210262\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 66.47818663437894\n",
      "q 65.96561507855216\n",
      "a 3\n",
      "[66.47818663437894, 66.30676805986515, 66.1323767205509, 65.96561507855216]\n",
      "max of r 66.47818663437894\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 68.29355128158588\n",
      "q 67.87022610613556\n",
      "a 3\n",
      "[68.29355128158588, 68.15615765776681, 68.01741884900726, 67.87022610613556]\n",
      "max of r 68.29355128158588\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 69.97998594890315\n",
      "q 69.66363287480023\n",
      "a 3\n",
      "[69.97998594890315, 69.88439600068263, 69.78072244482621, 69.66363287480023]\n",
      "max of r 69.97998594890315\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 71.50425412717294\n",
      "q 71.32525767624145\n",
      "a 3\n",
      "[71.50425412717294, 71.47161556467178, 71.40343495726924, 71.32525767624145]\n",
      "max of r 71.50425412717294\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 72.84773698849098\n",
      "q 72.81351619930327\n",
      "a 3\n",
      "[72.81580695224879, 72.84773698849098, 72.8307161965843, 72.81351619930327]\n",
      "max of r 72.84773698849098\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 74.08196834027837\n",
      "q 74.08196834027837\n",
      "a 3\n",
      "[73.8738585397915, 73.96457900599117, 74.02312243542217, 74.08196834027837]\n",
      "max of r 74.08196834027837\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 68.51928758413746\n",
      "q 68.51928758413746\n",
      "a 3\n",
      "[68.04151579009968, 68.20024352128429, 68.35976555271088, 68.51928758413746]\n",
      "max of r 68.51928758413746\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 61.28944783323911\n",
      "q 60.88879889332467\n",
      "a 3\n",
      "[61.28944783323911, 61.16517791329093, 61.03173243319447, 60.88879889332467]\n",
      "max of r 61.28944783323911\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 63.29499695028855\n",
      "q 62.7613537083475\n",
      "a 3\n",
      "[63.29499695028855, 63.1259847339352, 62.948026979013925, 62.7613537083475]\n",
      "max of r 63.29499695028855\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 65.31151417812424\n",
      "q 64.72379687185514\n",
      "a 3\n",
      "[65.31151417812424, 65.12256201994313, 64.92644995992015, 64.72379687185514]\n",
      "max of r 65.31151417812424\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 67.30035198053847\n",
      "q 66.72551827330857\n",
      "a 3\n",
      "[67.30035198053847, 67.11065782046316, 66.91594561632405, 66.72551827330857]\n",
      "max of r 67.30035198053847\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 69.22525072826005\n",
      "q 68.70735223692444\n",
      "a 3\n",
      "[69.22525072826005, 69.05197812041654, 68.87570059486829, 68.70735223692444]\n",
      "max of r 69.22525072826005\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 71.04821223300797\n",
      "q 70.61838375240629\n",
      "a 3\n",
      "[71.04821223300797, 70.90847138248598, 70.76736236594238, 70.61838375240629]\n",
      "max of r 71.04821223300797\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 72.7439423657124\n",
      "q 72.41968645262881\n",
      "a 3\n",
      "[72.7439423657124, 72.64540964263685, 72.53906347756212, 72.41968645262881]\n",
      "max of r 72.7439423657124\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 74.27955310516982\n",
      "q 74.09096903364092\n",
      "a 3\n",
      "[74.27955310516982, 74.24324291484523, 74.17204350837035, 74.09096903364092]\n",
      "max of r 74.27955310516982\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 75.63249391491115\n",
      "q 75.5910148903318\n",
      "a 3\n",
      "[75.60494018984588, 75.63249391491115, 75.61186301005435, 75.5910148903318]\n",
      "max of r 75.63249391491115\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 76.87385295242838\n",
      "q 76.87385295242838\n",
      "a 3\n",
      "[76.67572804639349, 76.76560523650613, 76.81958963429356, 76.87385295242838]\n",
      "max of r 76.87385295242838\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 71.12023609966353\n",
      "q 71.12023609966353\n",
      "a 3\n",
      "[70.65657983094286, 70.81061803182027, 70.96542706574192, 71.12023609966353]\n",
      "max of r 71.12023609966353\n"
     ]
    }
   ],
   "source": [
    "# -----------\n",
    "# Tested Cell\n",
    "# -----------\n",
    "# The contents of the cell will be tested by the autograder.\n",
    "# If they do not pass here, they will not pass there.\n",
    "gamma = 0.9\n",
    "env = tools.ParkingWorld(num_spaces=10, num_prices=4)\n",
    "\n",
    "V = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n",
    "\n",
    "for _ in range(10):\n",
    "    for s in env.S:\n",
    "        bellman_optimality_update(env, V, s, gamma)\n",
    "\n",
    "# make sure value function is exactly correct\n",
    "answer = [61, 63, 65, 67, 69, 71, 72, 74, 75, 76, 71]\n",
    "assert np.all(V == answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "c5020582c7de3757fa3ece73983b61d9",
     "grade": false,
     "grade_id": "cell-d472d58e936b371e",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "When you are ready to test the value iteration algorithm, run the cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "cd8be31ddef5580d095a7e861e52a479",
     "grade": false,
     "grade_id": "cell-f609be2c58adc3e2",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "actions [0, 1, 2, 3]\n",
      "vmax 3.1912683401479534\n",
      "q 3.0506021191716735\n",
      "a 3\n",
      "[3.1912683401479534, 3.147637674299018, 3.100785506424715, 3.0506021191716735]\n",
      "max of r 3.1912683401479534\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 4.7375246378665175\n",
      "q 4.599770038159347\n",
      "a 3\n",
      "[4.7375246378665175, 4.6938958454832544, 4.647957852893302, 4.599770038159347]\n",
      "max of r 4.7375246378665175\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 6.369030743705762\n",
      "q 6.270486818060966\n",
      "a 3\n",
      "[6.369030743705762, 6.3373486965249075, 6.304466131974216, 6.270486818060966]\n",
      "max of r 6.369030743705762\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 8.061362833339373\n",
      "q 8.033427231447897\n",
      "a 3\n",
      "[8.061362833339373, 8.050480950573174, 8.039311205665115, 8.033427231447897]\n",
      "max of r 8.061362833339373\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 9.862841653252502\n",
      "q 9.862841653252502\n",
      "a 3\n",
      "[9.795071910331735, 9.812582947796809, 9.830397664113159, 9.862841653252502]\n",
      "max of r 9.862841653252502\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 11.741218108922167\n",
      "q 11.741218108922167\n",
      "a 3\n",
      "[11.557953706091713, 11.611427391935083, 11.665424624613536, 11.741218108922167]\n",
      "max of r 11.741218108922167\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 13.655595479475835\n",
      "q 13.655595479475835\n",
      "a 3\n",
      "[13.335324903779293, 13.432669277031511, 13.53771175461756, 13.655595479475835]\n",
      "max of r 13.655595479475835\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 15.589421520278695\n",
      "q 15.589421520278695\n",
      "a 3\n",
      "[15.108608109463045, 15.258354580870426, 15.421064352197629, 15.589421520278695]\n",
      "max of r 15.589421520278695\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 17.52435310022027\n",
      "q 17.52435310022027\n",
      "a 3\n",
      "[16.85665546035061, 17.070871637145622, 17.296424986432594, 17.52435310022027]\n",
      "max of r 17.52435310022027\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 19.43904776197073\n",
      "q 19.43904776197073\n",
      "a 3\n",
      "[18.554430118538576, 18.845104851078467, 19.141311104406526, 19.43904776197073]\n",
      "max of r 19.43904776197073\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 14.641135424688713\n",
      "q 14.641135424688713\n",
      "a 3\n",
      "[13.504718174183475, 13.882264387883762, 14.26169990628624, 14.641135424688713]\n",
      "max of r 14.641135424688713\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 11.618522706416499\n",
      "q 11.232995618272982\n",
      "a 3\n",
      "[11.618522706416499, 11.498943155322, 11.370534360883449, 11.232995618272982]\n",
      "max of r 11.618522706416499\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 14.10532423969989\n",
      "q 13.705173552214092\n",
      "a 3\n",
      "[14.10532423969989, 13.97859096688396, 13.845149910428042, 13.705173552214092]\n",
      "max of r 14.10532423969989\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 16.573362233195372\n",
      "q 16.188124778229632\n",
      "a 3\n",
      "[16.573362233195372, 16.449507706960535, 16.320960001991736, 16.188124778229632]\n",
      "max of r 16.573362233195372\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 19.007256809112917\n",
      "q 18.68028857781547\n",
      "a 3\n",
      "[19.007256809112917, 18.896133854721626, 18.782071327064543, 18.68028857781547]\n",
      "max of r 19.007256809112917\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 21.38509650530325\n",
      "q 21.151953600804344\n",
      "a 3\n",
      "[21.38509650530325, 21.297735995925233, 21.208860468422927, 21.151953600804344]\n",
      "max of r 21.38509650530325\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 23.67283994205566\n",
      "q 23.55402429831923\n",
      "a 3\n",
      "[23.67283994205566, 23.621338354463113, 23.569332528332296, 23.55402429831923]\n",
      "max of r 23.67283994205566\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 25.85107891183371\n",
      "q 25.85107891183371\n",
      "a 3\n",
      "[25.831258386347635, 25.829143579250125, 25.834430679871076, 25.85107891183371]\n",
      "max of r 25.85107891183371\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 28.0043677768681\n",
      "q 28.0043677768681\n",
      "a 3\n",
      "[27.816625775559817, 27.879649136319188, 27.94168344504002, 28.0043677768681]\n",
      "max of r 28.0043677768681\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 29.977770642238127\n",
      "q 29.977770642238127\n",
      "a 3\n",
      "[29.58520312872475, 29.727790028577594, 29.85212579367295, 29.977770642238127]\n",
      "max of r 29.977770642238127\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 31.711595400361922\n",
      "q 31.711595400361922\n",
      "a 3\n",
      "[31.070172258283648, 31.295795207395265, 31.503159610662095, 31.711595400361922]\n",
      "max of r 31.711595400361922\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 26.465318108960798\n",
      "q 26.465318108960798\n",
      "a 3\n",
      "[25.521689851472928, 25.835186743214713, 26.150252426087764, 26.465318108960798]\n",
      "max of r 26.465318108960798\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 21.288173590021565\n",
      "q 20.810737519531205\n",
      "a 3\n",
      "[21.288173590021565, 21.140086483456685, 20.981065257403884, 20.810737519531205]\n",
      "max of r 21.288173590021565\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 24.04506465357362\n",
      "q 23.54411622096334\n",
      "a 3\n",
      "[24.04506465357362, 23.886407336812255, 23.719352549283435, 23.54411622096334]\n",
      "max of r 24.04506465357362\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 26.701432039499466\n",
      "q 26.20914897679193\n",
      "a 3\n",
      "[26.701432039499466, 26.54316216018439, 26.378895012506103, 26.20914897679193]\n",
      "max of r 26.701432039499466\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 29.25511757755052\n",
      "q 28.82060735391479\n",
      "a 3\n",
      "[29.25511757755052, 29.108767346698386, 28.958545663468012, 28.82060735391479]\n",
      "max of r 29.25511757755052\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 31.69252288007243\n",
      "q 31.35159913242779\n",
      "a 3\n",
      "[31.69252288007243, 31.57022535219656, 31.445806923554343, 31.35159913242779]\n",
      "max of r 31.69252288007243\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 33.99206663313224\n",
      "q 33.76424620822737\n",
      "a 3\n",
      "[33.99206663313224, 33.90668384217016, 33.82046509069267, 33.76424620822737]\n",
      "max of r 33.99206663313224\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 36.125887672952786\n",
      "q 36.03531397675359\n",
      "a 3\n",
      "[36.125887672952786, 36.091452581792524, 36.06071645345547, 36.03531397675359]\n",
      "max of r 36.125887672952786\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 38.1337163070308\n",
      "q 38.1337163070308\n",
      "a 3\n",
      "[38.056841681360325, 38.09010565602493, 38.11305174470211, 38.1337163070308]\n",
      "max of r 38.1337163070308\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 40.01509711891821\n",
      "q 40.01509711891821\n",
      "a 3\n",
      "[39.73481183348285, 39.847031130082854, 39.93062406556036, 40.01509711891821]\n",
      "max of r 40.01509711891821\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 41.64222758766661\n",
      "q 41.64222758766661\n",
      "a 3\n",
      "[41.11448953246786, 41.30561891934245, 41.47348958612464, 41.64222758766661]\n",
      "max of r 41.64222758766661\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 36.29419239647731\n",
      "q 36.29419239647731\n",
      "a 3\n",
      "[35.46640663491351, 35.741417754196036, 36.01780507533668, 36.29419239647731]\n",
      "max of r 36.29419239647731\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 30.32479325722165\n",
      "q 29.832637893078353\n",
      "a 3\n",
      "[30.32479325722165, 30.172140643895826, 30.008216813561546, 29.832637893078353]\n",
      "max of r 30.32479325722165\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 33.043657834722374\n",
      "q 32.51226666434305\n",
      "a 3\n",
      "[33.043657834722374, 32.87535888066885, 32.69815213984754, 32.51226666434305]\n",
      "max of r 33.043657834722374\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 35.64505733414558\n",
      "q 35.1130745498983\n",
      "a 3\n",
      "[35.64505733414558, 35.47402392381974, 35.2965096008576, 35.1130745498983]\n",
      "max of r 35.64505733414558\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 38.13195514354339\n",
      "q 37.65150795988797\n",
      "a 3\n",
      "[38.13195514354339, 37.97101323984316, 37.80581388528544, 37.65150795988797]\n",
      "max of r 38.13195514354339\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 40.494299924578215\n",
      "q 40.101756931742386\n",
      "a 3\n",
      "[40.494299924578215, 40.35639941753309, 40.21610742068313, 40.101756931742386]\n",
      "max of r 40.494299924578215\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 42.7133982991689\n",
      "q 42.42921201191521\n",
      "a 3\n",
      "[42.7133982991689, 42.61192382643802, 42.509455843755454, 42.42921201191521]\n",
      "max of r 42.7133982991689\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 44.76378475927104\n",
      "q 44.61249410807059\n",
      "a 3\n",
      "[44.76378475927104, 44.71288320403316, 44.662529552996865, 44.61249410807059]\n",
      "max of r 44.76378475927104\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 46.628588638881716\n",
      "q 46.6241445397545\n",
      "a 3\n",
      "[46.61287841789254, 46.628588638881716, 46.62838451337174, 46.6241445397545]\n",
      "max of r 46.628588638881716\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 48.423810256611404\n",
      "q 48.423810256611404\n",
      "a 3\n",
      "[48.21471437439838, 48.30695381322185, 48.36507606151305, 48.423810256611404]\n",
      "max of r 48.423810256611404\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 49.97445346510145\n",
      "q 49.97445346510145\n",
      "a 3\n",
      "[49.52366622397268, 49.69098859714001, 49.83235583117744, 49.97445346510145]\n",
      "max of r 49.97445346510145\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 44.557128075439834\n",
      "q 44.557128075439834\n",
      "a 3\n",
      "[43.81243116139184, 44.05983808884574, 44.3084830821428, 44.557128075439834]\n",
      "max of r 44.557128075439834\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 38.21018224580017\n",
      "q 37.72893933132369\n",
      "a 3\n",
      "[38.21018224580017, 38.06091436437161, 37.900625180082145, 37.72893933132369]\n",
      "max of r 38.21018224580017\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 40.802307945380505\n",
      "q 40.2628517784301\n",
      "a 3\n",
      "[40.802307945380505, 40.63145469505143, 40.45155846325481, 40.2628517784301]\n",
      "max of r 40.802307945380505\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 43.291764356628704\n",
      "q 42.74075878215262\n",
      "a 3\n",
      "[43.291764356628704, 43.11461508544593, 42.93075315532748, 42.74075878215262]\n",
      "max of r 43.291764356628704\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 45.67769693917515\n",
      "q 45.17022215700037\n",
      "a 3\n",
      "[45.67769693917515, 45.50838171970023, 45.334587547200826, 45.17022215700037]\n",
      "max of r 45.67769693917515\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 47.94767751993526\n",
      "q 47.52111492512806\n",
      "a 3\n",
      "[47.94767751993526, 47.79988791413666, 47.64953532040495, 47.52111492512806]\n",
      "max of r 47.94767751993526\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 50.08149267938623\n",
      "q 49.75765790021296\n",
      "a 3\n",
      "[50.08149267938623, 49.9690385286514, 49.85548336881688, 49.75765790021296]\n",
      "max of r 50.08149267938623\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 52.05266806803214\n",
      "q 51.856937183077235\n",
      "a 3\n",
      "[52.05266806803214, 51.98993285902995, 51.92525324970802, 51.856937183077235]\n",
      "max of r 52.05266806803214\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 53.83119331451352\n",
      "q 53.79045992823178\n",
      "a 3\n",
      "[53.828671928164084, 53.83119331451352, 53.81351445057632, 53.79045992823178]\n",
      "max of r 53.83119331451352\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 55.52271194122489\n",
      "q 55.52271194122489\n",
      "a 3\n",
      "[55.3680840029746, 55.444979909524434, 55.48364239415622, 55.52271194122489]\n",
      "max of r 55.52271194122489\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 57.008661857052246\n",
      "q 57.008661857052246\n",
      "a 3\n",
      "[56.617907928237685, 56.766634239601814, 56.88733623377023, 57.008661857052246]\n",
      "max of r 57.008661857052246\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 51.532271063403755\n",
      "q 51.532271063403755\n",
      "a 3\n",
      "[50.85334098354882, 51.07889852493821, 51.305584794171, 51.532271063403755]\n",
      "max of r 51.532271063403755\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 44.94077778298788\n",
      "q 44.47567880826477\n",
      "a 3\n",
      "[44.94077778298788, 44.79651729307077, 44.64160522469602, 44.47567880826477]\n",
      "max of r 44.94077778298788\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 47.39857866533672\n",
      "q 46.85694130353327\n",
      "a 3\n",
      "[47.39857866533672, 47.22703460034453, 47.04641099020111, 46.85694130353327]\n",
      "max of r 47.39857866533672\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 49.77688737808798\n",
      "q 49.21323607760836\n",
      "a 3\n",
      "[49.77688737808798, 49.595672483527025, 49.40759087270394, 49.21323607760836]\n",
      "max of r 49.77688737808798\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 52.06765565015634\n",
      "q 51.539888553108284\n",
      "a 3\n",
      "[52.06765565015634, 51.89211411664214, 51.71192892330284, 51.539888553108284]\n",
      "max of r 52.06765565015634\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 54.254107619138615\n",
      "q 53.80072369021743\n",
      "a 3\n",
      "[54.254107619138615, 54.09860375789594, 53.94040312702752, 53.80072369021743]\n",
      "max of r 54.254107619138615\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 56.31324696512216\n",
      "q 55.957409843724626\n",
      "a 3\n",
      "[56.31324696512216, 56.191976383891884, 56.06951847420295, 55.957409843724626]\n",
      "max of r 56.31324696512216\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 58.216732559963035\n",
      "q 57.98461967072849\n",
      "a 3\n",
      "[58.216732559963035, 58.14430215667072, 58.067893187664374, 57.98461967072849]\n",
      "max of r 58.216732559963035\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 59.930887292275614\n",
      "q 59.85222382086493\n",
      "a 3\n",
      "[59.930887292275614, 59.9228294767434, 59.890796926410474, 59.85222382086493]\n",
      "max of r 59.930887292275614\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 61.52475809155311\n",
      "q 61.52475809155311\n",
      "a 3\n",
      "[61.41472764625195, 61.479079094281204, 61.501798988401895, 61.52475809155311]\n",
      "max of r 61.52475809155311\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 62.95534194031417\n",
      "q 62.95534194031417\n",
      "a 3\n",
      "[62.61400607545697, 62.74742914351403, 62.85111767894347, 62.95534194031417]\n",
      "max of r 62.95534194031417\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 57.428435913112374\n",
      "q 57.428435913112374\n",
      "a 3\n",
      "[56.8038670829857, 57.01136445853566, 57.21990018582403, 57.428435913112374]\n",
      "max of r 57.428435913112374\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 50.64844380703954\n",
      "q 50.198766564298396\n",
      "a 3\n",
      "[50.64844380703954, 50.508966700298906, 50.3591911996852, 50.198766564298396]\n",
      "max of r 50.64844380703954\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 52.98584798085423\n",
      "q 52.443436813852585\n",
      "a 3\n",
      "[52.98584798085423, 52.8140588410231, 52.633177184632686, 52.443436813852585]\n",
      "max of r 52.98584798085423\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 55.26644942955631\n",
      "q 54.69283877421097\n",
      "a 3\n",
      "[55.26644942955631, 55.082032584710916, 54.890627693156816, 54.69283877421097]\n",
      "max of r 55.26644942955631\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 57.47473578448016\n",
      "q 56.93033189180284\n",
      "a 3\n",
      "[57.47473578448016, 57.29410277802626, 57.1086914252838, 56.93033189180284]\n",
      "max of r 57.47473578448016\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 59.58951188780856\n",
      "q 59.11384304331029\n",
      "a 3\n",
      "[59.58951188780856, 59.42761552381997, 59.26291153053246, 59.11384304331029]\n",
      "max of r 59.58951188780856\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 61.58499335822482\n",
      "q 61.202416815187135\n",
      "a 3\n",
      "[61.58499335822482, 61.4563685411687, 61.32648439225952, 61.202416815187135]\n",
      "max of r 61.58499335822482\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 63.43098894982913\n",
      "q 63.168387834180194\n",
      "a 3\n",
      "[63.43098894982913, 63.35044293347021, 63.264206066858655, 63.168387834180194]\n",
      "max of r 63.43098894982913\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 65.09257071585856\n",
      "q 64.98005417214132\n",
      "a 3\n",
      "[65.09257071585856, 65.07572918108811, 65.03166131913264, 64.98005417214132]\n",
      "max of r 65.09257071585856\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 66.60112090175686\n",
      "q 66.60112090175686\n",
      "a 3\n",
      "[66.52841841845313, 66.58228002778105, 66.5916511323901, 66.60112090175686]\n",
      "max of r 66.60112090175686\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 67.98461207626191\n",
      "q 67.98461207626191\n",
      "a 3\n",
      "[67.68470407058719, 67.80530048980751, 67.89472526822966, 67.98461207626191]\n",
      "max of r 67.98461207626191\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 62.414787433679216\n",
      "q 62.414787433679216\n",
      "a 3\n",
      "[61.835848880416705, 62.02818673753055, 62.22148708560489, 62.414787433679216]\n",
      "max of r 62.414787433679216\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 55.47993629396122\n",
      "q 55.04372092116916\n",
      "a 3\n",
      "[55.47993629396122, 55.34463467686817, 55.19934296622464, 55.04372092116916]\n",
      "max of r 55.47993629396122\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 57.71391680560831\n",
      "q 57.17108912346362\n",
      "a 3\n",
      "[57.71391680560831, 57.5419957496543, 57.36097519503767, 57.17108912346362]\n",
      "max of r 57.71391680560831\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 59.91105450014237\n",
      "q 59.32918081391697\n",
      "a 3\n",
      "[59.91105450014237, 59.72398107618784, 59.52981894064817, 59.32918081391697]\n",
      "max of r 59.91105450014237\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 62.04913416526118\n",
      "q 61.490777065145586\n",
      "a 3\n",
      "[62.04913416526118, 61.864234110399586, 61.67444283156821, 61.490777065145586]\n",
      "max of r 62.04913416526118\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 64.10303384142833\n",
      "q 63.60861192547459\n",
      "a 3\n",
      "[64.10303384142833, 63.93576293122635, 63.76559118559625, 63.60861192547459]\n",
      "max of r 64.10303384142833\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 66.04451348432275\n",
      "q 65.63940463571515\n",
      "a 3\n",
      "[66.04451348432275, 65.9096965006575, 65.77355955925981, 65.63940463571515]\n",
      "max of r 66.04451348432275\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 67.8417660735969\n",
      "q 67.55345513355903\n",
      "a 3\n",
      "[67.8417660735969, 67.75438145413278, 67.65985776430907, 67.55345513355903]\n",
      "max of r 67.8417660735969\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 69.4587554786696\n",
      "q 69.31770425352877\n",
      "a 3\n",
      "[69.4587554786696, 69.43453005169049, 69.3803111053439, 69.31770425352877]\n",
      "max of r 69.4587554786696\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 70.89869928835552\n",
      "q 70.89490867526195\n",
      "a 3\n",
      "[70.85367890307933, 70.89869928835552, 70.89681390703629, 70.89490867526195]\n",
      "max of r 70.89869928835552\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 72.23885701468743\n",
      "q 72.23885701468743\n",
      "a 3\n",
      "[71.97384069973378, 72.0836350095153, 72.16104603293675, 72.23885701468743]\n",
      "max of r 72.23885701468743\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 66.63264998946823\n",
      "q 66.63264998946823\n",
      "a 3\n",
      "[66.0921674810153, 66.27172927889096, 66.45218963417962, 66.63264998946823]\n",
      "max of r 66.63264998946823\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 59.5678727840508\n",
      "q 59.143135741901375\n",
      "a 3\n",
      "[59.5678727840508, 59.436131419058775, 59.294662834326004, 59.143135741901375]\n",
      "max of r 59.5678727840508\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 61.714024832924494\n",
      "q 61.17089213730435\n",
      "a 3\n",
      "[61.714024832924494, 61.542007174972284, 61.360884905372586, 61.17089213730435]\n",
      "max of r 61.714024832924494\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 63.840399175603615\n",
      "q 63.25156435461241\n",
      "a 3\n",
      "[63.840399175603615, 63.651087734453824, 63.45460277727107, 63.25156435461241]\n",
      "max of r 63.840399175603615\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 65.91901631459174\n",
      "q 65.34887369243035\n",
      "a 3\n",
      "[65.91901631459174, 65.73051252230601, 65.53702217516006, 65.34887369243035]\n",
      "max of r 65.91901631459174\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 67.92139226006024\n",
      "q 67.41111724158768\n",
      "a 3\n",
      "[67.92139226006024, 67.7495780703526, 67.57478425503068, 67.41111724158768]\n",
      "max of r 67.92139226006024\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 69.81719236600802\n",
      "q 69.39302750260298\n",
      "a 3\n",
      "[69.81719236600802, 69.67713779026404, 69.53571197689705, 69.39302750260298]\n",
      "max of r 69.81719236600802\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 71.57323639377799\n",
      "q 71.26317540782601\n",
      "a 3\n",
      "[71.57323639377799, 71.4800643017567, 71.37852979071764, 71.26317540782601]\n",
      "max of r 71.57323639377799\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 73.15255037469552\n",
      "q 72.98735225477819\n",
      "a 3\n",
      "[73.15255037469552, 73.12207221176499, 73.05926452106375, 72.98735225477819]\n",
      "max of r 73.15255037469552\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 74.55045998471354\n",
      "q 74.52751742567015\n",
      "a 3\n",
      "[74.51289784275076, 74.55045998471354, 74.53904877729977, 74.52751742567015]\n",
      "max of r 74.55045998471354\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 75.83925194355369\n",
      "q 75.83925194355369\n",
      "a 3\n",
      "[75.6034892718753, 75.70422786162719, 75.77156594527635, 75.83925194355369]\n",
      "max of r 75.83925194355369\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 70.20213764752957\n",
      "q 70.20213764752957\n",
      "a 3\n",
      "[69.69394559622431, 69.86277969718289, 70.03245867235626, 70.20213764752957]\n",
      "max of r 70.20213764752957\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 63.02707509910725\n",
      "q 62.61203269850398\n",
      "a 3\n",
      "[63.02707509910725, 62.89834073652766, 62.76010117842297, 62.61203269850398]\n",
      "max of r 63.02707509910725\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 65.09900405938468\n",
      "q 64.5555783964948\n",
      "a 3\n",
      "[65.09900405938468, 64.92689361463468, 64.74567364718465, 64.5555783964948]\n",
      "max of r 65.09900405938468\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 67.16565102930788\n",
      "q 66.5708746481036\n",
      "a 3\n",
      "[67.16565102930788, 66.97442936599302, 66.77596180322641, 66.5708746481036]\n",
      "max of r 67.16565102930788\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 69.19414494636558\n",
      "q 68.61396268774615\n",
      "a 3\n",
      "[69.19414494636558, 69.0025688725069, 68.80592497167979, 68.61396268774615]\n",
      "max of r 69.19414494636558\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 71.15315573355599\n",
      "q 70.6293838355316\n",
      "a 3\n",
      "[71.15315573355599, 70.97746638020978, 70.79873019762162, 70.6293838355316]\n",
      "max of r 71.15315573355599\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 73.01058076021681\n",
      "q 72.57019007418378\n",
      "a 3\n",
      "[73.01058076021681, 72.86605384056907, 72.72011189575198, 72.57019007418378]\n",
      "max of r 73.01058076021681\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 74.73208552471368\n",
      "q 74.40349629447249\n",
      "a 3\n",
      "[74.73208552471368, 74.63396390656443, 74.52645419242239, 74.40349629447249]\n",
      "max of r 74.73208552471368\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 76.27991286703777\n",
      "q 76.09413063519753\n",
      "a 3\n",
      "[76.27991286703777, 76.24407686379307, 76.17395677483148, 76.09413063519753]\n",
      "max of r 76.27991286703777\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 77.64264511604753\n",
      "q 77.60338987016172\n",
      "a 3\n",
      "[77.61133909378084, 77.64264511604753, 77.62312027786211, 77.60338987016172]\n",
      "max of r 77.64264511604753\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 78.88659043717982\n",
      "q 78.88659043717982\n",
      "a 3\n",
      "[78.67552909641539, 78.76862159862065, 78.82745403358746, 78.88659043717982]\n",
      "max of r 78.88659043717982\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 73.22328304510114\n",
      "q 73.22328304510114\n",
      "a 3\n",
      "[72.7423658976914, 72.90213859387967, 73.06271081949042, 73.22328304510114]\n",
      "max of r 73.22328304510114\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 65.95475789149712\n",
      "q 65.54789642340118\n",
      "a 3\n",
      "[65.95475789149712, 65.82856102178599, 65.69304631418585, 65.54789642340118]\n",
      "max of r 65.95475789149712\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 67.96397133655441\n",
      "q 67.4202723564706\n",
      "a 3\n",
      "[67.96397133655441, 67.79177432845817, 67.61046321600642, 67.4202723564706]\n",
      "max of r 67.96397133655441\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 69.98016465966413\n",
      "q 69.38033274809152\n",
      "a 3\n",
      "[69.98016465966413, 69.78731763435354, 69.58716312028488, 69.38033274809152]\n",
      "max of r 69.98016465966413\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 71.96632266409453\n",
      "q 71.3776168418874\n",
      "a 3\n",
      "[71.96632266409453, 71.77213740774482, 71.57281530283579, 71.3776168418874]\n",
      "max of r 71.96632266409453\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 73.88870221329833\n",
      "q 73.35348291329557\n",
      "a 3\n",
      "[73.88870221329833, 73.70972454382512, 73.52764301867356, 73.35348291329557]\n",
      "max of r 73.88870221329833\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 75.71369847515264\n",
      "q 75.25955415153514\n",
      "a 3\n",
      "[75.71369847515264, 75.56537935373586, 75.41560807869672, 75.25955415153514]\n",
      "max of r 75.71369847515264\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 77.40599175369853\n",
      "q 77.06170563482041\n",
      "a 3\n",
      "[77.40599175369853, 77.30367732976444, 77.19110555589874, 77.06170563482041]\n",
      "max of r 77.40599175369853\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 78.92715052433249\n",
      "q 78.72393973227489\n",
      "a 3\n",
      "[78.92715052433249, 78.8867818684196, 78.81046911404066, 78.72393973227489]\n",
      "max of r 78.92715052433249\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 80.26004270637218\n",
      "q 80.20697776334607\n",
      "a 3\n",
      "[80.2340235957857, 80.26004270637218, 80.23364917851306, 80.20697776334607]\n",
      "max of r 80.26004270637218\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.46590170628853\n",
      "q 81.46590170628853\n",
      "a 3\n",
      "[81.27573295478791, 81.36235845027502, 81.41399667906548, 81.46590170628853]\n",
      "max of r 81.46590170628853\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 75.78041523035677\n",
      "q 75.78041523035677\n",
      "a 3\n",
      "[75.32256976959005, 75.47467747483253, 75.62754635259466, 75.78041523035677]\n",
      "max of r 75.78041523035677\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 68.43279320072044\n",
      "q 68.03284672767164\n",
      "a 3\n",
      "[68.43279320072044, 68.30874116603903, 68.1755296589269, 68.03284672767164]\n",
      "max of r 68.43279320072044\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 70.3889606278371\n",
      "q 69.84502289028812\n",
      "a 3\n",
      "[70.3889606278371, 70.21668800194008, 70.03529726936172, 69.84502289028812]\n",
      "max of r 70.3889606278371\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 72.36247438692921\n",
      "q 71.75835760156048\n",
      "a 3\n",
      "[72.36247438692921, 72.16824976708011, 71.96666545773722, 71.75835760156048]\n",
      "max of r 72.36247438692921\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 74.31281304838612\n",
      "q 73.71688881909304\n",
      "a 3\n",
      "[74.31281304838612, 74.11641804361203, 73.9148277350528, 73.71688881909304]\n",
      "max of r 74.31281304838612\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 76.20419199966426\n",
      "q 75.65928133733908\n",
      "a 3\n",
      "[76.20419199966426, 76.02243045923416, 75.83751678484774, 75.65928133733908]\n",
      "max of r 76.20419199966426\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 78.00173586359563\n",
      "q 77.53594984433177\n",
      "a 3\n",
      "[78.00173586359563, 77.85020719682076, 77.6971949526066, 77.53594984433177]\n",
      "max of r 78.00173586359563\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.66929241308075\n",
      "q 79.31172138848595\n",
      "a 3\n",
      "[79.66929241308075, 79.56343019959704, 79.44657431361466, 79.31172138848595]\n",
      "max of r 79.66929241308075\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.16786160366249\n",
      "q 80.94990157865328\n",
      "a 3\n",
      "[81.16786160366249, 81.12365814497069, 81.0421043948595, 80.94990157865328]\n",
      "max of r 81.16786160366249\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.47548006600243\n",
      "q 82.41072832225335\n",
      "a 3\n",
      "[82.45393417327803, 82.47548006600243, 82.44327373815003, 82.41072832225335]\n",
      "max of r 82.47548006600243\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.64909032454877\n",
      "q 83.64909032454877\n",
      "a 3\n",
      "[83.47660116659225, 83.55775422508547, 83.603304602604, 83.64909032454877]\n",
      "max of r 83.64909032454877\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 77.944828446984\n",
      "q 77.944828446984\n",
      "a 3\n",
      "[77.5065072583111, 77.65212851238348, 77.79847847968377, 77.944828446984]\n",
      "max of r 77.944828446984\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 70.53028123739212\n",
      "q 70.13618590517606\n",
      "a 3\n",
      "[70.53028123739212, 70.40804406038399, 70.27678141228469, 70.13618590517606]\n",
      "max of r 70.53028123739212\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 72.44155565490098\n",
      "q 71.89741495862427\n",
      "a 3\n",
      "[72.44155565490098, 72.26921874915986, 72.08776033451099, 71.89741495862427]\n",
      "max of r 72.44155565490098\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 74.37894613545829\n",
      "q 73.7712023859655\n",
      "a 3\n",
      "[74.37894613545829, 74.18355544019916, 73.98076086973512, 73.7712023859655]\n",
      "max of r 74.37894613545829\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 76.29896501507622\n",
      "q 75.69693137314215\n",
      "a 3\n",
      "[76.29896501507622, 76.10069978124848, 75.89718976983102, 75.69693137314215]\n",
      "max of r 76.29896501507622\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 78.16410082818824\n",
      "q 77.61098795343068\n",
      "a 3\n",
      "[78.16410082818824, 77.979983283503, 77.79267274670741, 77.61098795343068]\n",
      "max of r 78.16410082818824\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.93840370081239\n",
      "q 79.46276491494157\n",
      "a 3\n",
      "[79.93840370081239, 79.78415886238301, 79.62840385318995, 79.46276491494157]\n",
      "max of r 79.93840370081239\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.58501758004115\n",
      "q 81.21620310148148\n",
      "a 3\n",
      "[81.58501758004115, 81.47615296667007, 81.35567132680372, 81.21620310148148]\n",
      "max of r 81.58501758004115\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.0644620007048\n",
      "q 82.83401916487992\n",
      "a 3\n",
      "[83.0644620007048, 83.01701319734443, 82.9310237405558, 82.83401916487992]\n",
      "max of r 83.0644620007048\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.35068537391015\n",
      "q 84.27604250829287\n",
      "a 3\n",
      "[84.33292526987843, 84.35068537391015, 84.31355938374024, 84.27604250829287]\n",
      "max of r 84.35068537391015\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.49699848074903\n",
      "q 85.49699848074903\n",
      "a 3\n",
      "[85.33947246820678, 85.41599393236802, 85.45639184492565, 85.49699848074903]\n",
      "max of r 85.49699848074903\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.77684386381495\n",
      "q 79.77684386381495\n",
      "a 3\n",
      "[79.35504727960881, 79.49517864706908, 79.63601125544204, 79.77684386381495]\n",
      "max of r 79.77684386381495\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 72.30566222662048\n",
      "q 71.91651947371238\n",
      "a 3\n",
      "[72.30566222662048, 72.18496119902602, 72.05534812305241, 71.91651947371238]\n",
      "max of r 72.30566222662048\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 74.1789374964681\n",
      "q 73.63462526263423\n",
      "a 3\n",
      "[74.1789374964681, 74.00654626240342, 73.82503064392218, 73.63462526263423]\n",
      "max of r 74.1789374964681\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 76.08575087367106\n",
      "q 75.47493756293514\n",
      "a 3\n",
      "[76.08575087367106, 75.88937330901848, 75.68555447404438, 75.47493756293514]\n",
      "max of r 76.08575087367106\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 77.98010452378531\n",
      "q 77.37290017934971\n",
      "a 3\n",
      "[77.98010452378531, 77.78025643896493, 77.57512170485975, 77.37290017934971]\n",
      "max of r 77.98010452378531\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.82302564801162\n",
      "q 79.2629706804522\n",
      "a 3\n",
      "[79.82302564801162, 79.63691409754517, 79.44757497464235, 79.2629706804522]\n",
      "max of r 79.82302564801162\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.57765509866911\n",
      "q 81.09367714223113\n",
      "a 3\n",
      "[81.57765509866911, 81.42111140218535, 81.26303502742155, 81.09367714223113]\n",
      "max of r 81.57765509866911\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.20654121818299\n",
      "q 82.82821043938651\n",
      "a 3\n",
      "[83.20654121818299, 83.09513546404789, 82.97158504458783, 82.82821043938651]\n",
      "max of r 83.20654121818299\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.66979696627561\n",
      "q 84.42878878283375\n",
      "a 3\n",
      "[84.66979696627561, 84.61960136451165, 84.52985755102131, 84.42878878283375]\n",
      "max of r 84.66979696627561\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.93791050040974\n",
      "q 85.85489580795422\n",
      "a 3\n",
      "[85.92335466137813, 85.93791050040974, 85.8966205173608, 85.85489580795422]\n",
      "max of r 85.93791050040974\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.06111849455772\n",
      "q 87.06111849455772\n",
      "a 3\n",
      "[86.91625730455026, 86.98885858501146, 87.02489544424485, 87.06111849455772]\n",
      "max of r 87.06111849455772\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.32751160689794\n",
      "q 81.32751160689794\n",
      "a 3\n",
      "[80.91970152899503, 81.05518622948915, 81.19134891819357, 81.32751160689794]\n",
      "max of r 81.32751160689794\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 73.80839789600097\n",
      "q 73.42344732373364\n",
      "a 3\n",
      "[73.80839789600097, 73.68899716375421, 73.56078039138339, 73.42344732373364]\n",
      "max of r 73.80839789600097\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 75.64950880626189\n",
      "q 75.10505157231545\n",
      "a 3\n",
      "[75.64950880626189, 75.4770716486504, 75.29550767596457, 75.10505157231545]\n",
      "max of r 75.64950880626189\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 77.53044006351338\n",
      "q 76.91702879000471\n",
      "a 3\n",
      "[77.53044006351338, 77.33322724921348, 77.12854151475251, 76.91702879000471]\n",
      "max of r 77.53044006351338\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.4030692389601\n",
      "q 78.79148845687678\n",
      "a 3\n",
      "[79.4030692389601, 79.20188144911816, 78.99537157031932, 78.79148845687678]\n",
      "max of r 79.4030692389601\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.22718665257295\n",
      "q 80.66125587570977\n",
      "a 3\n",
      "[81.22718665257295, 81.03938738153983, 80.84833126938513, 80.66125587570977]\n",
      "max of r 81.22718665257295\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.96516352866942\n",
      "q 82.47412722304273\n",
      "a 3\n",
      "[82.96516352866942, 82.80667407101319, 82.64663288463957, 82.47412722304273]\n",
      "max of r 82.96516352866942\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.57904406492902\n",
      "q 84.19265856921177\n",
      "a 3\n",
      "[84.57904406492902, 84.46548746788861, 84.33933959616283, 84.19265856921177]\n",
      "max of r 84.57904406492902\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.02859706644551\n",
      "q 85.77864621159725\n",
      "a 3\n",
      "[86.02859706644551, 85.97607653975366, 85.88315497912279, 85.77864621159725]\n",
      "max of r 86.02859706644551\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.28138184750492\n",
      "q 87.19128109327629\n",
      "a 3\n",
      "[87.26953815067121, 87.28138184750492, 87.23656738750086, 87.19128109327629]\n",
      "max of r 87.28138184750492\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.38503303745779\n",
      "q 88.38503303745779\n",
      "a 3\n",
      "[88.25089159233048, 88.32017475611312, 88.35252033708068, 88.38503303745779]\n",
      "max of r 88.38503303745779\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.64003971107334\n",
      "q 82.64003971107334\n",
      "a 3\n",
      "[82.24406809404402, 82.37561976195096, 82.50782973651218, 82.64003971107334]\n",
      "max of r 82.64003971107334\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 75.08035652594396\n",
      "q 74.69895442345256\n",
      "a 3\n",
      "[75.08035652594396, 74.9620564282205, 74.83502155652553, 74.69895442345256]\n",
      "max of r 75.08035652594396\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 76.8942422425786\n",
      "q 76.34966235335453\n",
      "a 3\n",
      "[76.8942422425786, 76.72176623833946, 76.5401613629379, 76.34966235335453]\n",
      "max of r 76.8942422425786\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 78.7532658545162\n",
      "q 78.13765566106079\n",
      "a 3\n",
      "[78.7532658545162, 78.55534608354652, 78.34992660393978, 78.13765566106079]\n",
      "max of r 78.7532658545162\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 80.6075066060005\n",
      "q 79.99222154405396\n",
      "a 3\n",
      "[80.6075066060005, 80.4051848723717, 80.19751105318579, 79.99222154405396]\n",
      "max of r 80.6075066060005\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.41570787313903\n",
      "q 81.84480369825272\n",
      "a 3\n",
      "[82.41570787313903, 82.2264800861955, 82.03397068460848, 81.84480369825272]\n",
      "max of r 82.41570787313903\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.13958943319963\n",
      "q 83.64257878915215\n",
      "a 3\n",
      "[84.13958943319963, 83.97945304469096, 83.81774880279677, 83.64257878915215]\n",
      "max of r 84.13958943319963\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.74076875048283\n",
      "q 85.34756555856494\n",
      "a 3\n",
      "[85.74076875048283, 85.62539163347886, 85.49704521926505, 85.34756555856494]\n",
      "max of r 85.74076875048283\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.17872331823871\n",
      "q 86.92120317401839\n",
      "a 3\n",
      "[87.17872331823871, 87.12423492157187, 87.0286236397716, 86.92120317401839]\n",
      "max of r 87.17872331823871\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.41853339789544\n",
      "q 88.32243482713116\n",
      "a 3\n",
      "[88.40898532372009, 88.41853339789544, 88.37073573412633, 88.32243482713116]\n",
      "max of r 88.41853339789544\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.50563116689992\n",
      "q 89.50563116689992\n",
      "a 3\n",
      "[89.3805631814609, 89.44703780867874, 89.47625899945363, 89.50563116689992]\n",
      "max of r 89.50563116689992\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.7510000239366\n",
      "q 83.7510000239366\n",
      "a 3\n",
      "[83.36504878063778, 83.49327142994692, 83.62213572694179, 83.7510000239366]\n",
      "max of r 83.7510000239366\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 76.15697816314871\n",
      "q 75.77857961729765\n",
      "a 3\n",
      "[76.15697816314871, 76.03960968337323, 75.91357521631664, 75.77857961729765]\n",
      "max of r 76.15697816314871\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 77.94781958358247\n",
      "q 77.40313589997479\n",
      "a 3\n",
      "[77.94781958358247, 77.7753107062224, 77.5936712177797, 77.40313589997479]\n",
      "max of r 77.94781958358247\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.78829986236718\n",
      "q 79.17082846179711\n",
      "a 3\n",
      "[79.78829986236718, 79.5897817100033, 79.38374117473339, 79.17082846179711]\n",
      "max of r 79.78829986236718\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.62697607659223\n",
      "q 81.0085556254246\n",
      "a 3\n",
      "[81.62697607659223, 81.42369454688375, 81.21503554180637, 81.0085556254246]\n",
      "max of r 81.62697607659223\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.42170543115738\n",
      "q 82.84659164743361\n",
      "a 3\n",
      "[83.42170543115738, 83.23126851334717, 83.03752901197753, 82.84659164743361]\n",
      "max of r 83.42170543115738\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.13365629437783\n",
      "q 84.63158881593083\n",
      "a 3\n",
      "[85.13365629437783, 84.97212590184652, 84.80901400760187, 84.63158881593083]\n",
      "max of r 85.13365629437783\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.72408492729028\n",
      "q 86.3251110581743\n",
      "a 3\n",
      "[86.72408492729028, 86.60716687498905, 86.47695955674152, 86.3251110581743]\n",
      "max of r 86.72408492729028\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.1522222456675\n",
      "q 87.88829525377454\n",
      "a 3\n",
      "[88.1522222456675, 88.0960681919812, 87.99818025856692, 87.88829525377454]\n",
      "max of r 88.1522222456675\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.381050171965\n",
      "q 89.27987488837087\n",
      "a 3\n",
      "[89.37344517412454, 89.381050171965, 89.33072744449345, 89.27987488837087]\n",
      "max of r 89.381050171965\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.45413666478798\n",
      "q 90.45413666478798\n",
      "a 3\n",
      "[90.3367487003124, 90.40084610650746, 90.42742272913655, 90.45413666478798]\n",
      "max of r 90.45413666478798\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.6913478003374\n",
      "q 84.6913478003374\n",
      "a 3\n",
      "[84.31387807288925, 84.43928295064973, 84.56531537549358, 84.6913478003374]\n",
      "max of r 84.6913478003374\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 77.06826085347336\n",
      "q 76.69240461189142\n",
      "a 3\n",
      "[77.06826085347336, 76.95168092426306, 76.8264932309776, 76.69240461189142]\n",
      "max of r 77.06826085347336\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 78.83959689854815\n",
      "q 78.29482536748267\n",
      "a 3\n",
      "[78.83959689854815, 78.66706019867975, 78.48539141512913, 78.29482536748267]\n",
      "max of r 78.83959689854815\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 80.66438155738075\n",
      "q 80.045334784681\n",
      "a 3\n",
      "[80.66438155738075, 80.46535692007815, 80.25879070780272, 80.045334784681]\n",
      "max of r 80.66438155738075\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.48988349656675\n",
      "q 81.86880916893735\n",
      "a 3\n",
      "[82.48988349656675, 82.28578957017022, 82.07629667779918, 81.86880916893735]\n",
      "max of r 82.48988349656675\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.2732098376976\n",
      "q 83.69453292733718\n",
      "a 3\n",
      "[84.2732098376976, 84.08174947907162, 83.88696878823298, 83.69453292733718]\n",
      "max of r 84.2732098376976\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.97506221919554\n",
      "q 85.4687144983052\n",
      "a 3\n",
      "[85.97506221919554, 85.81235190387461, 85.64804853452578, 85.4687144983052]\n",
      "max of r 85.97506221919554\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.55639116834166\n",
      "q 87.15253283999014\n",
      "a 3\n",
      "[87.55639116834166, 87.43816882636175, 87.30638638799533, 87.15253283999014]\n",
      "max of r 87.55639116834166\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.976218890058\n",
      "q 88.70686896621365\n",
      "a 3\n",
      "[88.976218890058, 88.918654978602, 88.81884002465574, 88.70686896621365]\n",
      "max of r 88.976218890058\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.19575121433607\n",
      "q 90.09027886107395\n",
      "a 3\n",
      "[90.18979088979046, 90.19575121433607, 90.14329120334875, 90.09027886107395]\n",
      "max of r 90.19575121433607\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.25697817242991\n",
      "q 91.25697817242991\n",
      "a 3\n",
      "[91.14609078971169, 91.20817605042474, 91.23251423756105, 91.25697817242991]\n",
      "max of r 91.25697817242991\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.4872843836996\n",
      "q 85.4872843836996\n",
      "a 3\n",
      "[85.11699364575091, 85.24001348377138, 85.3636489337355, 85.4872843836996]\n",
      "max of r 85.4872843836996\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 77.8395959711618\n",
      "q 77.46589160971553\n",
      "a 3\n",
      "[77.8395959711618, 77.72368349404123, 77.59921253465723, 77.46589160971553]\n",
      "max of r 77.8395959711618\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.59442211112031\n",
      "q 79.04957622541406\n",
      "a 3\n",
      "[79.59442211112031, 79.42186186210587, 79.24016828299165, 79.04957622541406]\n",
      "max of r 79.59442211112031\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.40592155256573\n",
      "q 80.78554134240149\n",
      "a 3\n",
      "[81.40592155256573, 81.20646821274913, 80.99945705327667, 80.78554134240149]\n",
      "max of r 81.40592155256573\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.22027241356321\n",
      "q 82.59695177202761\n",
      "a 3\n",
      "[83.22027241356321, 83.01549085233684, 82.80529213489822, 82.59695177202761]\n",
      "max of r 83.22027241356321\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.99394692325791\n",
      "q 84.41225408408764\n",
      "a 3\n",
      "[84.99394692325791, 84.80162029610948, 84.605958313799, 84.41225408408764]\n",
      "max of r 84.99394692325791\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.68725166630925\n",
      "q 86.17728102966657\n",
      "a 3\n",
      "[86.68725166630925, 86.52354263171186, 86.35823076488805, 86.17728102966657]\n",
      "max of r 86.68725166630925\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.26087838808962\n",
      "q 87.85288571795046\n",
      "a 3\n",
      "[88.26087838808962, 88.1415520591878, 88.00843639546653, 87.85288571795046]\n",
      "max of r 88.26087838808962\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.67367263463325\n",
      "q 89.39973259060038\n",
      "a 3\n",
      "[89.67367263463325, 89.61491538044035, 89.51346934279663, 89.39973259060038]\n",
      "max of r 89.67367263463325\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.88533690177914\n",
      "q 90.77622738932264\n",
      "a 3\n",
      "[90.8807686744014, 90.88533690177914, 90.83106783462308, 90.77622738932264]\n",
      "max of r 90.88533690177914\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.93652561892259\n",
      "q 91.93652561892259\n",
      "a 3\n",
      "[91.83114050935899, 91.89152263419084, 91.91396614728188, 91.93652561892259]\n",
      "max of r 91.93652561892259\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.16098730933663\n",
      "q 86.16098730933663\n",
      "a 3\n",
      "[85.79677306780889, 85.9177741418452, 86.03938072559092, 86.16098730933663]\n",
      "max of r 86.16098730933663\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 78.49247553891772\n",
      "q 78.1205925896286\n",
      "a 3\n",
      "[78.49247553891772, 78.37712801210753, 78.253263716552, 78.1205925896286]\n",
      "max of r 78.49247553891772\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 80.2333272315872\n",
      "q 79.6884184105394\n",
      "a 3\n",
      "[80.2333272315872, 80.06074705007717, 79.87903248347317, 79.6884184105394]\n",
      "max of r 80.2333272315872\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.03358169265114\n",
      "q 81.41207282419833\n",
      "a 3\n",
      "[82.03358169265114, 81.83376548718944, 81.62637771212361, 81.41207282419833]\n",
      "max of r 82.03358169265114\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.83849396889639\n",
      "q 83.21327198491046\n",
      "a 3\n",
      "[83.83849396889639, 83.63313037446916, 83.42233422710768, 83.21327198491046]\n",
      "max of r 83.83849396889639\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.60399889850771\n",
      "q 85.01975329331424\n",
      "a 3\n",
      "[85.60399889850771, 85.41093903760344, 85.21453110569517, 85.01975329331424]\n",
      "max of r 85.60399889850771\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.29006868146953\n",
      "q 86.77703150809239\n",
      "a 3\n",
      "[87.29006868146953, 87.12551430309145, 86.95934881594762, 86.77703150809239]\n",
      "max of r 87.29006868146953\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.85717602284296\n",
      "q 88.4456839306839\n",
      "a 3\n",
      "[88.85717602284296, 88.73691524867814, 88.60267110589126, 88.4456839306839]\n",
      "max of r 88.85717602284296\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.26401693960062\n",
      "q 89.98619168997617\n",
      "a 3\n",
      "[90.26401693960062, 90.20424960688048, 90.10142297455673, 89.98619168997617]\n",
      "max of r 90.26401693960062\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.4690214636338\n",
      "q 91.35683335828966\n",
      "a 3\n",
      "[91.46563154608326, 91.4690214636338, 91.41322116092913, 91.35683335828966]\n",
      "max of r 91.4690214636338\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.51171353363333\n",
      "q 92.51171353363333\n",
      "a 3\n",
      "[92.41098570140497, 92.46992624456524, 92.49076605274306, 92.51171353363333]\n",
      "max of r 92.51171353363333\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.73122825847324\n",
      "q 86.73122825847324\n",
      "a 3\n",
      "[86.37215733287914, 86.49144966881263, 86.61133896364296, 86.73122825847324]\n",
      "max of r 86.73122825847324\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.04509101939651\n",
      "q 78.6747497643736\n",
      "a 3\n",
      "[79.04509101939651, 78.93022168235287, 78.80687088405398, 78.6747497643736]\n",
      "max of r 79.04509101939651\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 80.77411434925254\n",
      "q 80.22915225810652\n",
      "a 3\n",
      "[80.77411434925254, 80.60151729636357, 80.41978496540628, 80.22915225810652]\n",
      "max of r 80.77411434925254\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.564850744773\n",
      "q 81.94238654855836\n",
      "a 3\n",
      "[82.564850744773, 82.36472739973853, 82.15702084676133, 81.94238654855836]\n",
      "max of r 82.564850744773\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.3617739393035\n",
      "q 83.734942606107\n",
      "a 3\n",
      "[84.3617739393035, 84.15591769576515, 83.94461586707823, 83.734942606107]\n",
      "max of r 84.3617739393035\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.12036390825344\n",
      "q 85.53395757075269\n",
      "a 3\n",
      "[86.12036390825344, 85.92668341786677, 85.72964409343318, 85.53395757075269]\n",
      "max of r 86.12036390825344\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.80030981905148\n",
      "q 87.28467704349714\n",
      "a 3\n",
      "[87.80030981905148, 87.63503991813548, 87.4681519029602, 87.28467704349714]\n",
      "max of r 87.80030981905148\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.36189897490722\n",
      "q 88.94744487438399\n",
      "a 3\n",
      "[89.36189897490722, 89.24084726022164, 89.10564794129118, 88.94744487438399]\n",
      "max of r 89.36189897490722\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.76370082721147\n",
      "q 90.4825870312412\n",
      "a 3\n",
      "[90.76370082721147, 90.7030785358633, 90.5990833297059, 90.4825870312412]\n",
      "max of r 90.76370082721147\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.9630683588781\n",
      "q 91.84827444666485\n",
      "a 3\n",
      "[91.9606757956222, 91.9630683588781, 91.90597197570537, 91.84827444666485]\n",
      "max of r 91.9630683588781\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.99856862972142\n",
      "q 92.99856862972142\n",
      "a 3\n",
      "[92.9017828469074, 92.95950319513965, 92.97898558275614, 92.99856862972142]\n",
      "max of r 92.99856862972142\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.21389610487887\n",
      "q 87.21389610487887\n",
      "a 3\n",
      "[86.859178625329, 86.97702463767861, 87.09546037127876, 87.21389610487887]\n",
      "max of r 87.21389610487887\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.51284017806461\n",
      "q 79.1438038561292\n",
      "a 3\n",
      "[79.51284017806461, 79.39837559419554, 79.27545943431699, 79.1438038561292]\n",
      "max of r 79.51284017806461\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.23185165146734\n",
      "q 80.68684447105798\n",
      "a 3\n",
      "[81.23185165146734, 81.0592403181833, 80.87749295099309, 80.68684447105798]\n",
      "max of r 81.23185165146734\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.0145316906802\n",
      "q 82.391258878424\n",
      "a 3\n",
      "[83.0145316906802, 82.81414837415166, 82.60617199866627, 82.391258878424]\n",
      "max of r 83.0145316906802\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.80469270351374\n",
      "q 84.17649917227205\n",
      "a 3\n",
      "[84.80469270351374, 84.59841946803182, 84.38668961657176, 84.17649917227205]\n",
      "max of r 84.80469270351374\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.55742965681576\n",
      "q 85.96919441523238\n",
      "a 3\n",
      "[86.55742965681576, 86.36322384832826, 86.16565009565409, 85.96919441523238]\n",
      "max of r 86.55742965681576\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.23219215135437\n",
      "q 87.71436238572656\n",
      "a 3\n",
      "[88.23219215135437, 88.06631661220743, 87.89881702915615, 87.71436238572656]\n",
      "max of r 88.23219215135437\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.78911056103462\n",
      "q 89.3721493340186\n",
      "a 3\n",
      "[89.78911056103462, 89.66738937223286, 89.53138156557378, 89.3721493340186]\n",
      "max of r 89.78911056103462\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.18664720860484\n",
      "q 90.90274989528389\n",
      "a 3\n",
      "[91.18664720860484, 91.12530125642803, 91.02031693678406, 90.90274989528389]\n",
      "max of r 91.18664720860484\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.38124343268072\n",
      "q 92.26424389285084\n",
      "a 3\n",
      "[92.37969505791813, 92.38124343268072, 92.3230500108488, 92.26424389285084]\n",
      "max of r 92.38124343268072\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 93.41065636410048\n",
      "q 93.41065636410048\n",
      "a 3\n",
      "[93.31720724186599, 93.37389478307648, 93.3922282120674, 93.41065636410048]\n",
      "max of r 93.41065636410048\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.62243963431538\n",
      "q 87.62243963431538\n",
      "a 3\n",
      "[87.27140703292923, 87.38802883665474, 87.50523423548509, 87.62243963431538]\n",
      "max of r 87.62243963431538\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 79.90875611419301\n",
      "q 79.54082432403871\n",
      "a 3\n",
      "[79.90875611419301, 79.79463412470606, 79.67208585491562, 79.54082432403871]\n",
      "max of r 79.90875611419301\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.61929327295326\n",
      "q 81.07424792774243\n",
      "a 3\n",
      "[81.61929327295326, 81.44666985234724, 81.26490975807299, 81.07424792774243]\n",
      "max of r 81.61929327295326\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.39515418742002\n",
      "q 82.77119693999606\n",
      "a 3\n",
      "[83.39515418742002, 83.194550823769, 82.98634606298805, 82.77119693999606]\n",
      "max of r 83.39515418742002\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.1795915010115\n",
      "q 84.55024496735042\n",
      "a 3\n",
      "[85.1795915010115, 84.97296531191812, 84.76087317004477, 84.55024496735042]\n",
      "max of r 85.1795915010115\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.92737429858389\n",
      "q 86.3375910215712\n",
      "a 3\n",
      "[86.92737429858389, 86.73272384620333, 86.53469773855974, 86.3375910215712]\n",
      "max of r 86.92737429858389\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.59774940499831\n",
      "q 88.07806004569001\n",
      "a 3\n",
      "[88.59774940499831, 88.43136123675943, 88.26334400559921, 88.07806004569001]\n",
      "max of r 88.59774940499831\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.15071436481738\n",
      "q 89.73163103600376\n",
      "a 3\n",
      "[90.15071436481738, 90.02842651444948, 89.89173438122488, 89.73163103600376]\n",
      "max of r 90.15071436481738\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.54464082411712\n",
      "q 91.25838746406612\n",
      "a 3\n",
      "[91.54464082411712, 91.48268234522905, 91.37686081233926, 91.25838746406612]\n",
      "max of r 91.54464082411712\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.73519848034886\n",
      "q 92.61633203577918\n",
      "a 3\n",
      "[92.73436465027524, 92.73519848034886, 92.67607649439438, 92.61633203577918]\n",
      "max of r 92.73519848034886\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 93.75945891787137\n",
      "q 93.75945891787137\n",
      "a 3\n",
      "[93.66883403822662, 93.72464738276403, 93.7420083011244, 93.75945891787137]\n",
      "max of r 93.75945891787137\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.96824227415402\n",
      "q 87.96824227415402\n",
      "a 3\n",
      "[87.62032865643468, 87.73591425583163, 87.85207826499285, 87.96824227415402]\n",
      "max of r 87.96824227415402\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 80.24387040684329\n",
      "q 79.87687352320366\n",
      "a 3\n",
      "[80.24387040684329, 80.13003839879937, 80.00780152144321, 79.87687352320366]\n",
      "max of r 80.24387040684329\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.94723466928068\n",
      "q 81.4021570203195\n",
      "a 3\n",
      "[81.94723466928068, 81.77460101762888, 81.59283015079642, 81.4021570203195]\n",
      "max of r 81.94723466928068\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.71732368633126\n",
      "q 83.09278711389035\n",
      "a 3\n",
      "[83.71732368633126, 83.51653406865799, 83.3081359961925, 83.09278711389035]\n",
      "max of r 83.71732368633126\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.49691630121379\n",
      "q 84.86659383414272\n",
      "a 3\n",
      "[85.49691630121379, 85.28999136233827, 85.07759256775333, 84.86659383414272]\n",
      "max of r 85.49691630121379\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.24050576317468\n",
      "q 86.64941218579247\n",
      "a 3\n",
      "[87.24050576317468, 87.04547895179984, 86.8470699582919, 86.64941218579247]\n",
      "max of r 87.24050576317468\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.90716726189021\n",
      "q 88.38590389061743\n",
      "a 3\n",
      "[88.90716726189021, 88.74034519008822, 88.57188980712887, 88.38590389061743]\n",
      "max of r 88.90716726189021\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.45678591146185\n",
      "q 90.03590637649057\n",
      "a 3\n",
      "[90.45678591146185, 90.33401842293738, 90.19674705661835, 90.03590637649057]\n",
      "max of r 90.45678591146185\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.84765660670055\n",
      "q 91.55940902297489\n",
      "a 3\n",
      "[91.84765660670055, 91.78517966811756, 91.6786494945823, 91.55940902297489]\n",
      "max of r 91.84765660670055\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 93.03479590645074\n",
      "q 92.91434926163156\n",
      "a 3\n",
      "[93.03456688693424, 93.03479590645074, 92.9748879579204, 92.91434926163156]\n",
      "max of r 93.03479590645074\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 94.05469512940728\n",
      "q 94.05469512940728\n",
      "a 3\n",
      "[93.96646076747345, 94.02153416756084, 94.03807192579504, 94.05469512940728]\n",
      "max of r 94.05469512940728\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.26093927485313\n",
      "q 88.26093927485313\n",
      "a 3\n",
      "[87.91566565191434, 88.0303741790624, 88.14565672695778, 88.26093927485313]\n",
      "max of r 88.26093927485313\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 80.52752049233588\n",
      "q 80.16131493965091\n",
      "a 3\n",
      "[80.52752049233588, 80.41393393267481, 80.2919606265618, 80.16131493965091]\n",
      "max of r 80.52752049233588\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.22481341523029\n",
      "q 81.6797084234743\n",
      "a 3\n",
      "[82.22481341523029, 82.05217110373611, 81.87039111871009, 81.6797084234743]\n",
      "max of r 82.22481341523029\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.9900169372957\n",
      "q 83.36499000800035\n",
      "a 3\n",
      "[83.9900169372957, 83.7890696690225, 83.58050797215485, 83.36499000800035]\n",
      "max of r 83.9900169372957\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.7655088640443\n",
      "q 85.13436033971121\n",
      "a 3\n",
      "[85.7655088640443, 85.55833105501954, 85.34567270102539, 85.13436033971121]\n",
      "max of r 85.7655088640443\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.50554896976755\n",
      "q 86.91334631760141\n",
      "a 3\n",
      "[87.50554896976755, 87.31020359764133, 87.11147051885709, 86.91334631760141]\n",
      "max of r 87.50554896976755\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.16906716733321\n",
      "q 88.6464715084261\n",
      "a 3\n",
      "[89.16906716733321, 89.00187782745151, 88.83305158058701, 88.6464715084261]\n",
      "max of r 89.16906716733321\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.71585340656401\n",
      "q 90.29345351259502\n",
      "a 3\n",
      "[90.71585340656401, 90.59267993892415, 90.45491829355609, 90.29345351259502]\n",
      "max of r 90.71585340656401\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.10413761785912\n",
      "q 91.81420206758555\n",
      "a 3\n",
      "[92.10413761785912, 92.04122184052771, 91.9340918537823, 91.81420206758555]\n",
      "max of r 92.10413761785912\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 93.28866643433693\n",
      "q 93.16659935493571\n",
      "a 3\n",
      "[93.28866643433693, 93.28838352532642, 93.22781031614713, 93.16659935493571]\n",
      "max of r 93.28866643433693\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 94.30461889704083\n",
      "q 94.30461889704083\n",
      "a 3\n",
      "[94.21840392921492, 94.27285227134956, 94.28869465788924, 94.30461889704083]\n",
      "max of r 94.30461889704083\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.50871185816764\n",
      "q 88.50871185816764\n",
      "a 3\n",
      "[88.16566914130524, 88.27963650569652, 88.3941741819321, 88.50871185816764]\n",
      "max of r 88.50871185816764\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 80.76762368550712\n",
      "q 80.40208732700762\n",
      "a 3\n",
      "[80.76762368550712, 80.65424469087262, 80.53249427550124, 80.40208732700762]\n",
      "max of r 80.76762368550712\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.45978025938086\n",
      "q 81.91465133583377\n",
      "a 3\n",
      "[82.45978025938086, 82.28713036835651, 82.10534240262824, 81.91465133583377]\n",
      "max of r 82.45978025938086\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.22085154049233\n",
      "q 83.59540851863642\n",
      "a 3\n",
      "[84.22085154049233, 84.01977049772161, 83.81106995728355, 83.59540851863642]\n",
      "max of r 84.22085154049233\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.99287600647799\n",
      "q 85.36102697309708\n",
      "a 3\n",
      "[85.99287600647799, 85.78548371564565, 85.57260520608381, 85.36102697309708]\n",
      "max of r 85.99287600647799\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.72991594734735\n",
      "q 87.13677295410821\n",
      "a 3\n",
      "[87.72991594734735, 87.534300350454, 87.3352923606271, 87.13677295410821]\n",
      "max of r 87.72991594734735\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.39077846872706\n",
      "q 88.86705318823539\n",
      "a 3\n",
      "[89.39077846872706, 89.22327750010744, 89.05413657342976, 88.86705318823539]\n",
      "max of r 89.39077846872706\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.93517316345552\n",
      "q 90.51148403107445\n",
      "a 3\n",
      "[90.93517316345552, 90.8116550792529, 90.67347763297202, 90.51148403107445]\n",
      "max of r 90.93517316345552\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.32127521236582\n",
      "q 92.02990802982997\n",
      "a 3\n",
      "[92.32127521236582, 92.25798672647578, 92.15034818251756, 92.02990802982997]\n",
      "max of r 92.32127521236582\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 93.50379455522254\n",
      "q 93.38016087646464\n",
      "a 3\n",
      "[93.50379455522254, 93.50307920934057, 93.44194188857567, 93.38016087646464]\n",
      "max of r 93.50379455522254\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 94.51620801690764\n",
      "q 94.51620801690764\n",
      "a 3\n",
      "[94.43169894524877, 94.48561927969715, 94.50087423952067, 94.51620801690764]\n",
      "max of r 94.51620801690764\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.71847811064806\n",
      "q 88.71847811064806\n",
      "a 3\n",
      "[88.377320628609, 88.49066167087327, 88.6045698907607, 88.71847811064806]\n",
      "max of r 88.71847811064806\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 80.97088569858091\n",
      "q 80.60591490477404\n",
      "a 3\n",
      "[80.97088569858091, 80.85768212604809, 80.73612008519721, 80.60591490477404]\n",
      "max of r 80.97088569858091\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.65869813842068\n",
      "q 82.11354791915451\n",
      "a 3\n",
      "[82.65869813842068, 82.4860415027467, 82.30424643538566, 82.11354791915451]\n",
      "max of r 82.65869813842068\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.41627529586947\n",
      "q 83.79047881270625\n",
      "a 3\n",
      "[84.41627529586947, 84.21508061466044, 84.0062621297202, 83.79047881270625]\n",
      "max of r 84.41627529586947\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.18536849204617\n",
      "q 85.55292505521003\n",
      "a 3\n",
      "[86.18536849204617, 85.9777941606761, 85.76472879499629, 85.55292505521003]\n",
      "max of r 86.18536849204617\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 87.9198728910154\n",
      "q 87.32593231867803\n",
      "a 3\n",
      "[87.9198728910154, 87.7240279754011, 87.524786689976, 87.32593231867803]\n",
      "max of r 87.9198728910154\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.57849165662581\n",
      "q 89.05380838728941\n",
      "a 3\n",
      "[89.57849165662581, 89.41072622475969, 89.24131824554516, 89.05380838728941]\n",
      "max of r 89.57849165662581\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.12086634552838\n",
      "q 90.69608390534745\n",
      "a 3\n",
      "[91.12086634552838, 90.99705577798966, 90.85852568597697, 90.69608390534745]\n",
      "max of r 91.12086634552838\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.50512574643999\n",
      "q 92.2125445019734\n",
      "a 3\n",
      "[92.50512574643999, 92.44152090746212, 92.3334511878495, 92.2125445019734]\n",
      "max of r 92.50512574643999\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 93.6859470472671\n",
      "q 93.56098643254697\n",
      "a 3\n",
      "[93.6859470472671, 93.68486635161241, 93.62325075554116, 93.56098643254697]\n",
      "max of r 93.6859470472671\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 94.69534652020945\n",
      "q 94.69534652020945\n",
      "a 3\n",
      "[94.61228091989491, 94.66575447812522, 94.68051237447068, 94.69534652020945]\n",
      "max of r 94.69534652020945\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.8960728523256\n",
      "q 88.8960728523256\n",
      "a 3\n",
      "[88.55651071932456, 88.669321746765, 88.78269729954532, 88.8960728523256]\n",
      "max of r 88.8960728523256\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.14297087367342\n",
      "q 80.77847835931328\n",
      "a 3\n",
      "[81.14297087367342, 81.02991564983853, 80.90851291111983, 80.77847835931328]\n",
      "max of r 81.14297087367342\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.82710769716188\n",
      "q 82.28193895879546\n",
      "a 3\n",
      "[82.82710769716188, 82.65444519623202, 82.47264395317671, 82.28193895879546]\n",
      "max of r 82.82710769716188\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.58172845632055\n",
      "q 83.9556322532184\n",
      "a 3\n",
      "[84.58172845632055, 84.38043741461863, 84.17151891782912, 83.9556322532184]\n",
      "max of r 84.58172845632055\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.3483414087111\n",
      "q 85.71539430484673\n",
      "a 3\n",
      "[86.3483414087111, 86.14061281247936, 85.92738910111717, 85.71539430484673]\n",
      "max of r 86.3483414087111\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.08070021961662\n",
      "q 87.48608402686288\n",
      "a 3\n",
      "[88.08070021961662, 87.88466102892814, 87.68522209928346, 87.48608402686288]\n",
      "max of r 88.08070021961662\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.73742000949582\n",
      "q 89.21192538400763\n",
      "a 3\n",
      "[89.73742000949582, 89.56943058087502, 89.39979641181239, 89.21192538400763]\n",
      "max of r 89.73742000949582\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.2780846595739\n",
      "q 90.85237639205164\n",
      "a 3\n",
      "[91.2780846595739, 91.15402642677178, 91.01519771174766, 90.85237639205164]\n",
      "max of r 91.2780846595739\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.66078357911437\n",
      "q 92.36717439941145\n",
      "a 3\n",
      "[92.66078357911437, 92.59691094765152, 92.48847613550154, 92.36717439941145]\n",
      "max of r 92.66078357911437\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 93.84016610905118\n",
      "q 93.71408215279762\n",
      "a 3\n",
      "[93.84016610905118, 93.83877620734475, 93.77675567524057, 93.71408215279762]\n",
      "max of r 93.84016610905118\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 94.84701227375041\n",
      "q 94.84701227375041\n",
      "a 3\n",
      "[94.76516856477747, 94.81826393077628, 94.83260106454043, 94.84701227375041]\n",
      "max of r 94.84701227375041\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.04643147305346\n",
      "q 89.04643147305346\n",
      "a 3\n",
      "[88.70821982811711, 88.82058218966898, 88.93350683136126, 89.04643147305346]\n",
      "max of r 89.04643147305346\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.28866491503157\n",
      "q 80.92457715633138\n",
      "a 3\n",
      "[81.28866491503157, 81.1757352349045, 81.05446730950486, 80.92457715633138]\n",
      "max of r 81.28866491503157\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 82.9696904910262\n",
      "q 82.42450594919399\n",
      "a 3\n",
      "[82.9696904910262, 82.79702298491951, 82.61521647177162, 82.42450594919399]\n",
      "max of r 82.9696904910262\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.72180865727044\n",
      "q 84.09545860953641\n",
      "a 3\n",
      "[84.72180865727044, 84.52043600406834, 84.31143280330099, 84.09545860953641]\n",
      "max of r 84.72180865727044\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.48632194507498\n",
      "q 85.85294836071827\n",
      "a 3\n",
      "[86.48632194507498, 86.27846272377654, 86.06510493187837, 85.85294836071827]\n",
      "max of r 86.48632194507498\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.21686425869501\n",
      "q 87.62167603263585\n",
      "a 3\n",
      "[88.21686425869501, 88.02066058044448, 87.82105431067154, 87.62167603263585]\n",
      "max of r 88.21686425869501\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.87197620757914\n",
      "q 89.34579465531891\n",
      "a 3\n",
      "[89.87197620757914, 89.70379714031786, 89.53397147591252, 89.34579465531891]\n",
      "max of r 89.87197620757914\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.4111928747934\n",
      "q 90.98470078737182\n",
      "a 3\n",
      "[91.4111928747934, 91.28692497628174, 91.14784344407396, 90.98470078737182]\n",
      "max of r 91.4111928747934\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.79257037112716\n",
      "q 92.4980909417939\n",
      "a 3\n",
      "[92.79257037112716, 92.72847104145814, 92.61972713720743, 92.4980909417939]\n",
      "max of r 92.79257037112716\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 93.97073451980731\n",
      "q 93.84369955216707\n",
      "a 3\n",
      "[93.97073451980731, 93.96908285564223, 93.90671950378275, 93.84369955216707]\n",
      "max of r 93.97073451980731\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 94.97541882953344\n",
      "q 94.97541882953344\n",
      "a 3\n",
      "[94.89460956243985, 94.94738475485426, 94.96136567469341, 94.97541882953344]\n",
      "max of r 94.97541882953344\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.1737313201491\n",
      "q 89.1737313201491\n",
      "a 3\n",
      "[88.83666299589932, 88.9486455177435, 89.06118841894633, 89.1737313201491]\n",
      "max of r 89.1737313201491\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.41201588807557\n",
      "q 81.0482707805869\n",
      "a 3\n",
      "[81.41201588807557, 81.29919248862063, 81.17803869120404, 81.0482707805869]\n",
      "max of r 81.41201588807557\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.09040745902863\n",
      "q 82.5452095242126\n",
      "a 3\n",
      "[83.09040745902863, 82.91773571117822, 82.73592473177806, 82.5452095242126]\n",
      "max of r 83.09040745902863\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.84040684877513\n",
      "q 84.21384188468248\n",
      "a 3\n",
      "[84.84040684877513, 84.63896509958191, 84.42989018459177, 84.21384188468248]\n",
      "max of r 84.84040684877513\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.6031424446743\n",
      "q 85.96940779194973\n",
      "a 3\n",
      "[86.6031424446743, 86.39517263359426, 86.18170132644535, 85.96940779194973]\n",
      "max of r 86.6031424446743\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.33214677732582\n",
      "q 87.73647425703533\n",
      "a 3\n",
      "[88.33214677732582, 88.13580384245158, 87.93605590104718, 87.73647425703533]\n",
      "max of r 88.33214677732582\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.98589738795647\n",
      "q 89.45913427123577\n",
      "a 3\n",
      "[89.98589738795647, 89.8175577719166, 89.64756998684172, 89.45913427123577]\n",
      "max of r 89.98589738795647\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.52388805833428\n",
      "q 91.09673237471577\n",
      "a 3\n",
      "[91.52388805833428, 91.39944265608622, 91.26014708470584, 91.09673237471577]\n",
      "max of r 91.52388805833428\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.90414671857548\n",
      "q 92.60893051891694\n",
      "a 3\n",
      "[92.90414671857548, 92.83985546440043, 92.73084987588074, 92.60893051891694]\n",
      "max of r 92.90414671857548\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 94.08127928932016\n",
      "q 93.95343917492139\n",
      "a 3\n",
      "[94.08127928932016, 94.07940601244435, 94.016752421469, 93.95343917492139]\n",
      "max of r 94.08127928932016\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 95.08413327733992\n",
      "q 95.08413327733992\n",
      "a 3\n",
      "[95.00419979366478, 95.05670391954177, 95.07038326002308, 95.08413327733992]\n",
      "max of r 95.08413327733992\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.28150877067503\n",
      "q 89.28150877067503\n",
      "a 3\n",
      "[88.94540841234807, 89.0570693517198, 89.16928906119745, 89.28150877067503]\n",
      "max of r 89.28150877067503\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.5164502444531\n",
      "q 81.15299524025826\n",
      "a 3\n",
      "[81.5164502444531, 81.40371682679896, 81.28265965505506, 81.15299524025826]\n",
      "max of r 81.5164502444531\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.19261174675422\n",
      "q 82.64740247699184\n",
      "a 3\n",
      "[83.19261174675422, 83.01993640896907, 82.83812164962485, 82.64740247699184]\n",
      "max of r 83.19261174675422\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 84.94081726765131\n",
      "q 84.31407035255704\n",
      "a 3\n",
      "[84.94081726765131, 84.73931702088778, 84.53018139169822, 84.31407035255704]\n",
      "max of r 84.94081726765131\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.70204776629939\n",
      "q 86.0680074249845\n",
      "a 3\n",
      "[86.70204776629939, 86.49398432769823, 86.2804169162676, 86.0680074249845]\n",
      "max of r 86.70204776629939\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.42974995128652\n",
      "q 87.83366741417956\n",
      "a 3\n",
      "[88.42974995128652, 88.23328911854716, 88.03342123467645, 87.83366741417956]\n",
      "max of r 88.42974995128652\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.08234797070367\n",
      "q 89.55509248387665\n",
      "a 3\n",
      "[90.08234797070367, 89.9138724299508, 89.74374738935967, 89.55509248387665]\n",
      "max of r 90.08234797070367\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.61930064063847\n",
      "q 91.1915831350594\n",
      "a 3\n",
      "[91.61930064063847, 91.49470495868113, 91.35522817493019, 91.1915831350594]\n",
      "max of r 91.61930064063847\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 92.99861203294672\n",
      "q 92.70277205860731\n",
      "a 3\n",
      "[92.99861203294672, 92.93415828947045, 92.82493115003896, 92.70277205860731]\n",
      "max of r 92.99861203294672\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 94.17487121764653\n",
      "q 94.0463494376863\n",
      "a 3\n",
      "[94.17487121764653, 94.17281031581811, 94.10991099811943, 94.0463494376863]\n",
      "max of r 94.17487121764653\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 95.17617557887293\n",
      "q 95.17617557887293\n",
      "a 3\n",
      "[95.09698356526312, 95.14925819639961, 95.16268220881828, 95.17617557887293]\n",
      "max of r 95.17617557887293\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.37275776706136\n",
      "q 89.37275776706136\n",
      "a 3\n",
      "[89.0374769247683, 89.14886560043095, 89.26081168374617, 89.37275776706136]\n",
      "max of r 89.37275776706136\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 81.6048689060906\n",
      "q 81.24165951854303\n",
      "a 3\n",
      "[81.6048689060906, 81.49221167174323, 81.3712363083561, 81.24165951854303]\n",
      "max of r 81.6048689060906\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 83.2791423240117\n",
      "q 82.73392346057743\n",
      "a 3\n",
      "[83.2791423240117, 83.10646394777761, 82.92464598916433, 82.73392346057743]\n",
      "max of r 83.2791423240117\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 85.02582906625794\n",
      "q 84.39892810666694\n",
      "a 3\n",
      "[85.02582906625794, 84.82427929391501, 84.61509226248961, 84.39892810666694]\n",
      "max of r 85.02582906625794\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 86.78578527433001\n",
      "q 86.15148612677686\n",
      "a 3\n",
      "[86.78578527433001, 86.57764256761499, 86.36399379116418, 86.15148612677686]\n",
      "max of r 86.78578527433001\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 88.51238499666754\n",
      "q 87.91595532428498\n",
      "a 3\n",
      "[88.51238499666754, 88.31582434744998, 88.11585491606976, 87.91595532428498]\n",
      "max of r 88.51238499666754\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 90.16400717647323\n",
      "q 89.63633483031525\n",
      "a 3\n",
      "[90.16400717647323, 89.99541655685596, 89.82517531069345, 89.63633483031525]\n",
      "max of r 90.16400717647323\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 91.7000810262002\n",
      "q 91.2718878601789\n",
      "a 3\n",
      "[91.7000810262002, 91.57535811171708, 91.4357279065096, 91.2718878601789]\n",
      "max of r 91.7000810262002\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 93.07859041796064\n",
      "q 92.78222233117202\n",
      "a 3\n",
      "[93.07859041796064, 93.01399910468018, 92.90458439140406, 92.78222233117202]\n",
      "max of r 93.07859041796064\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 94.25411015493282\n",
      "q 94.12501124944637\n",
      "a 3\n",
      "[94.25411015493282, 94.25189040229432, 94.18878304243552, 94.12501124944637]\n",
      "max of r 94.25411015493282\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 95.25410253646677\n",
      "q 95.25410253646677\n",
      "a 3\n",
      "[95.17553828159691, 95.22761861315584, 95.24082645443734, 95.25410253646677]\n",
      "max of r 95.25410253646677\n",
      "actions [0, 1, 2, 3]\n",
      "vmax 89.45001307760357\n",
      "q 89.45001307760357\n",
      "a 3\n",
      "[89.11542607120114, 89.22658423723954, 89.33829865742157, 89.45001307760357]\n",
      "max of r 89.45001307760357\n"
     ]
    }
   ],
   "source": [
    "env = tools.ParkingWorld(num_spaces=10, num_prices=4)\n",
    "gamma = 0.9\n",
    "theta = 0.1\n",
    "V, pi = value_iteration(env, gamma, theta)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "8c88ac444253a80a377a7dce46e0c606",
     "grade": false,
     "grade_id": "cell-cba784b8d158758b",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "You can use the ``plot`` function to visualize the final value function and policy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d18a2592a3bac43de72e18cb54357ac9",
     "grade": false,
     "grade_id": "cell-086e26bfb519a017",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tools.plot(V, pi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "f7ee7bba538aa9300cd636c99403fd72",
     "grade": false,
     "grade_id": "cell-066f9bbdc057115b",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "You can check your value function (rounded to one decimal place) and policy against the answer below:<br>\n",
    "State $\\quad\\quad$    Value $\\quad\\quad$ Action<br>\n",
    "0 $\\quad\\quad\\quad\\;$        81.6 $\\quad\\quad\\;$ 0<br>\n",
    "1 $\\quad\\quad\\quad\\;$        83.3 $\\quad\\quad\\;$ 0<br>\n",
    "2 $\\quad\\quad\\quad\\;$        85.0 $\\quad\\quad\\;$ 0<br>\n",
    "3 $\\quad\\quad\\quad\\;$        86.8 $\\quad\\quad\\;$ 0<br>\n",
    "4 $\\quad\\quad\\quad\\;$        88.5 $\\quad\\quad\\;$ 0<br>\n",
    "5 $\\quad\\quad\\quad\\;$        90.2 $\\quad\\quad\\;$ 0<br>\n",
    "6 $\\quad\\quad\\quad\\;$        91.7 $\\quad\\quad\\;$ 0<br>\n",
    "7 $\\quad\\quad\\quad\\;$        93.1 $\\quad\\quad\\;$ 0<br>\n",
    "8 $\\quad\\quad\\quad\\;$        94.3 $\\quad\\quad\\;$ 0<br>\n",
    "9 $\\quad\\quad\\quad\\;$        95.3 $\\quad\\quad\\;$ 3<br>\n",
    "10 $\\quad\\quad\\;\\;\\,\\,$      89.5 $\\quad\\quad\\;$ 3<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "167e35e35d0d33a6e9b26413281e4592",
     "grade": false,
     "grade_id": "cell-12976ff0ac11680d",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "In the value iteration algorithm above, a policy is not explicitly maintained until the value function has converged. Below, we have written an identically behaving value iteration algorithm that maintains an updated policy. Writing value iteration in this form makes its relationship to policy iteration more evident. Policy iteration alternates between doing complete greedifications and complete evaluations. On the other hand, value iteration alternates between doing local greedifications and local evaluations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "335160bd36744265e1ac43bd4305766b",
     "grade": false,
     "grade_id": "cell-e7940cfb801649be",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "def value_iteration2(env, gamma, theta):\n",
    "    V = np.zeros(len(env.S))\n",
    "    pi = np.ones((len(env.S), len(env.A))) / len(env.A)\n",
    "    while True:\n",
    "        delta = 0\n",
    "        for s in env.S:\n",
    "            v = V[s]\n",
    "            q_greedify_policy(env, V, pi, s, gamma)\n",
    "            bellman_update(env, V, pi, s, gamma)\n",
    "            delta = max(delta, abs(v - V[s]))\n",
    "        if delta < theta:\n",
    "            break\n",
    "    return V, pi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "795713d092ebf77dbe0f17c46d4286cd",
     "grade": false,
     "grade_id": "cell-de841fb4eb290d56",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "You can try the second value iteration algorithm by running the cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "09b1fda9c335946b52cae6c8a55e80fb",
     "grade": false,
     "grade_id": "cell-2ace3a0ae8ee2e72",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env = tools.ParkingWorld(num_spaces=10, num_prices=4)\n",
    "gamma = 0.9\n",
    "theta = 0.1\n",
    "V, pi = value_iteration2(env, gamma, theta)\n",
    "tools.plot(V, pi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "524f8f37d4321a149e999e2af4c10756",
     "grade": false,
     "grade_id": "cell-6025f917f706302b",
     "locked": true,
     "schema_version": 3,
     "solution": false
    }
   },
   "source": [
    "## Wrapping Up\n",
    "Congratulations, you've completed assignment 2! In this assignment, we investigated policy evaluation and policy improvement, policy iteration and value iteration, and Bellman updates. Gridworld City thanks you for your service!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "fundamentals-of-reinforcement-learning",
   "graded_item_id": "fvXSL",
   "launcher_item_id": "5z8bz"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
